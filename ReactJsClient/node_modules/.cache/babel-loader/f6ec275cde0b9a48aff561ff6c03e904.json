{"ast":null,"code":"import _objectSpread from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/src/Etl/Dataloader.js\";\nimport React, { Component } from \"react\";\nimport ReactFileReader from \"react-file-reader\";\nimport CustomersRdxManager from \"./CustomersRdxManager\";\n\nvar Dataloader = /*#__PURE__*/function (_Component) {\n  _inherits(Dataloader, _Component);\n\n  var _super = _createSuper(Dataloader);\n\n  function Dataloader(props) {\n    var _this;\n\n    _classCallCheck(this, Dataloader);\n\n    _this = _super.call(this, props); //this.reloaded = this.props.\n\n    _this.onLoadClick = function (e) {\n      e.preventDefault(); //TODO: comment\n      //console.log(this.state);\n\n      switch (+_this.state.dataSource) {\n        case 1:\n          {\n            //JSON FILE\n            if (!_this.state.jsonDataFile) alert(\"Json data file not properly selected, pls try again.\");else _this.loadJsonFile();\n            break;\n          }\n\n        case 2:\n          {\n            //CSV FILES\n            if (!_this.state.csvDataFile || !_this.state.csvMapFile) alert(\"CSV Data or Map not properly selected, pls try again.\");else _this.loadCSVFiles();\n            break;\n          }\n\n        case 3:\n          {\n            //FETCH FROM API / DB\n            _this.fetchFromAPI();\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.refillCustRdxStore = function (dataSetArr) {\n      console.log(dataSetArr);\n      CustomersRdxManager.AddCustomerSet(dataSetArr); //TODO: redirect/navegate to /customers\n\n      _this.props.history && _this.props.history.push(\"/customers\"); //TODO: Debug: Comment\n\n      console.log(CustomersRdxManager.state);\n    };\n\n    _this.loadJsonFile = function () {\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log(\"JsonFile reading was aborted\");\n      };\n\n      reader.onerror = function () {\n        return console.log(\"JsonFile reading has failed\");\n      };\n\n      reader.onload = function () {\n        var dataSetArr = JSON.parse(reader.result);\n        dataSetArr = Array.isArray(dataSetArr) ? Array.from(dataSetArr) : []; //TODO: comment\n\n        console.log(\" from JSON:\");\n        console.log(dataSetArr);\n\n        _this.refillCustRdxStore(dataSetArr);\n      };\n\n      reader.readAsBinaryString(_this.state.jsonDataFile);\n    };\n\n    _this.loadCSVFiles = function () {\n      var csvParser = require(\"csvtojson\");\n\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log(\"CsvFile reading was aborted\");\n      };\n\n      reader.onerror = function () {\n        return console.log(\"CsvFile reading has failed\");\n      };\n\n      reader.onload = function () {\n        csvParser().fromString(reader.result).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              Mapper = _ref2[0];\n\n          reader.onload = function () {\n            csvParser().fromString(reader.result).then(function (dataSetArr) {\n              dataSetArr = dataSetArr.map(function (entry, i) {\n                var resultObj = {\n                  id: i + 1,\n                  updated_at: null\n                };\n\n                for (var key in Mapper) {\n                  resultObj[key] = entry[Mapper[key]];\n                }\n\n                return resultObj;\n              }); //TODO: comment\n\n              console.log(\"from CSV:\");\n              console.log(dataSetArr);\n\n              _this.refillCustRdxStore(dataSetArr);\n            });\n          };\n\n          reader.readAsBinaryString(_this.state.csvDataFile);\n        });\n      };\n\n      reader.readAsBinaryString(_this.state.csvMapFile);\n    };\n\n    _this.fetchFromAPI = function () {\n      var REST_API_URL = _this.state.restApiArr[_this.state.restApiIdx].split(\"[\")[1].split(\"]\")[0].concat(\"/customers\");\n\n      fetch(REST_API_URL).then(function (res) {\n        //console.log(res);\n        if (res.ok) return res.json();\n        alert(\"ERROR Fetching from: \" + REST_API_URL);\n        return [];\n      }).then(function (json) {\n        return _this.refillCustRdxStore(json);\n      }).catch(function (err) {\n        return console.error(err);\n      });\n    };\n\n    _this.state = {\n      //remounting:true,\n      dataSource: 0,\n      // 0: empty, 1:json, 2:csv, 3: database/api\n      jsonDataFile: null,\n      csvDataFile: null,\n      csvMapFile: null,\n      restApiIdx: 0,\n      restApiArr: [\"(SPRINGB) [\" + window.location.protocol + \"//\" + window.location.hostname + \":\" + 4001 + \"]\", \"(EXPRESS) [\" + window.location.protocol + \"//\" + window.location.hostname + \":\" + 4002 + \"]\"]\n    }; //ReduxEngine.reduxStore.subscribe(() => { ???\n    //    this.setState({remounting:true});\n    //});\n\n    return _this;\n  }\n\n  _createClass(Dataloader, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fontStyle = function fontStyle(f, v) {\n        return {\n          fontSize: \"calc(\".concat(f, \"px + \").concat(v, \"vmin)\")\n        };\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n        style: {\n          border: \"2px solid black\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        style: _objectSpread({\n          border: \"2px solid black\",\n          padding: \"0 2vmin 0 2vmin\"\n        }, fontStyle(14, 5)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }, \"Data loader\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, \"Select the source of the data:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"select\", {\n        value: this.state.dataSource,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            dataSource: e.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, [\"\", \"json file\", \"csv map/data files\", \"REST-API (database)\"].map(function (dataSource, index) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }\n        }, dataSource);\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }), +this.state.dataSource === 1 ? /*#__PURE__*/React.createElement(ReactFileReader //https://www.npmjs.com/package/react-file-reader\n      , {\n        fileTypes: [\".json\"],\n        handleFiles: function handleFiles(files) {\n          //TODO: validate?: file[0].type === \"application/json\"\n          _this2.setState({\n            jsonDataFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 30\n        }\n      }, \"JSON\"), \" file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, this.state.jsonDataFile && this.state.jsonDataFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"Open\"))) : +this.state.dataSource === 2 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactFileReader, {\n        fileTypes: [\".csv\"],\n        handleFiles: function handleFiles(files) {\n          _this2.setState({\n            csvDataFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 32\n        }\n      }, \"CSV\"), \" (\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }, \"Data\"), \" ) file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }\n      }, this.state.csvDataFile && this.state.csvDataFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 23\n        }\n      }, \"Open Data File\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(ReactFileReader, {\n        fileTypes: [\".csv\"],\n        handleFiles: function handleFiles(files) {\n          _this2.setState({\n            csvMapFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 23\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 32\n        }\n      }, \"CSV\"), \" (\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, \"Map\"), \" ) file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 23\n        }\n      }, this.state.csvMapFile && this.state.csvMapFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 23\n        }\n      }, \"Open Map File\")))) : +this.state.dataSource === 3 ? /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 19\n        }\n      }, \"Select the Rest API for fetching the data:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"select\", {\n        value: this.state.restApiIdx,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            restApiIdx: e.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 19\n        }\n      }, this.state.restApiArr.map(function (elem, index) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 27\n          }\n        }, elem);\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 19\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Load...\",\n        onClick: this.onLoadClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return Dataloader;\n}(Component);\n\nexport { Dataloader as default };","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/src/Etl/Dataloader.js"],"names":["React","Component","ReactFileReader","CustomersRdxManager","Dataloader","props","onLoadClick","e","preventDefault","state","dataSource","jsonDataFile","alert","loadJsonFile","csvDataFile","csvMapFile","loadCSVFiles","fetchFromAPI","refillCustRdxStore","dataSetArr","console","log","AddCustomerSet","history","push","reader","FileReader","onabort","onerror","onload","JSON","parse","result","Array","isArray","from","readAsBinaryString","csvParser","require","fromString","then","Mapper","map","entry","i","resultObj","id","updated_at","key","REST_API_URL","restApiArr","restApiIdx","split","concat","fetch","res","ok","json","catch","err","error","window","location","protocol","hostname","fontStyle","f","v","fontSize","border","padding","setState","target","value","index","files","length","color","name","elem"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport ReactFileReader from \"react-file-reader\";\r\n\r\nimport CustomersRdxManager from \"./CustomersRdxManager\";\r\n\r\nexport default class Dataloader extends Component {\r\n  \r\n  constructor(props) {\r\n    \r\n    super(props);\r\n\r\n    //this.reloaded = this.props.\r\n\r\n    this.state = {\r\n      //remounting:true,\r\n      dataSource: 0, // 0: empty, 1:json, 2:csv, 3: database/api\r\n      jsonDataFile: null,\r\n      csvDataFile: null,\r\n      csvMapFile: null,\r\n      restApiIdx: 0,\r\n      restApiArr: [        \r\n        \"(SPRINGB) [\" + window.location.protocol\r\n        + \"//\" + window.location.hostname \r\n        + \":\" + 4001 + \"]\",\r\n        \"(EXPRESS) [\" + window.location.protocol\r\n        + \"//\" + window.location.hostname\r\n        + \":\" + 4002 + \"]\"\r\n      ],\r\n    };\r\n    //ReduxEngine.reduxStore.subscribe(() => { ???\r\n    //    this.setState({remounting:true});\r\n    //});\r\n  }\r\n\r\n  render() {\r\n    const fontStyle = (f, v) => ({ fontSize: `calc(${f}px + ${v}vmin)` });\r\n\r\n    return (\r\n      <>\r\n        <fieldset style={{ border: \"2px solid black\" }}>\r\n          <legend\r\n            style={{\r\n              border: \"2px solid black\",\r\n              padding: \"0 2vmin 0 2vmin\",\r\n              ...fontStyle(14, 5),\r\n            }}\r\n            \r\n          >\r\n            Data loader\r\n          </legend>\r\n          <>\r\n            <form onSubmit={(e) => e.preventDefault()}>\r\n              <label>\r\n                <br />\r\n                <strong>Select the source of the data:</strong>\r\n                <br />\r\n                <select\r\n                  value={this.state.dataSource}\r\n                  onChange={(e) =>\r\n                    this.setState({ dataSource: e.target.value })\r\n                  }\r\n                >\r\n                  {[\r\n                    \"\",\r\n                    \"json file\",\r\n                    \"csv map/data files\",\r\n                    \"REST-API (database)\",\r\n                  ].map((dataSource, index) => (\r\n                    <option value={index}>{dataSource}</option>\r\n                  ))}\r\n                </select>\r\n              </label>\r\n              <br />\r\n              <br />\r\n              {+this.state.dataSource === 1 ? (\r\n                <ReactFileReader //https://www.npmjs.com/package/react-file-reader\r\n                  fileTypes={[\".json\"]}\r\n                  handleFiles={(files) => {\r\n                    //TODO: validate?: file[0].type === \"application/json\"\r\n                    this.setState({\r\n                      jsonDataFile: files.length > 0 ? files[0] : null,\r\n                    });\r\n                  }}\r\n                >\r\n                  <label>\r\n                    <strong>\r\n                      Select <span style={{ color: \"orange\" }}>JSON</span> file:{\" \"}\r\n                    </strong>\r\n                    <strong style={{ color: \"green\" }}>\r\n                      {this.state.jsonDataFile && this.state.jsonDataFile.name}\r\n                    </strong>\r\n                    <br />\r\n                    <button>Open</button>\r\n                  </label>\r\n                </ReactFileReader>\r\n              ) : +this.state.dataSource === 2 ? (\r\n                <>\r\n                  <ReactFileReader\r\n                    fileTypes={[\".csv\"]}\r\n                    handleFiles={(files) => {\r\n                      this.setState({\r\n                        csvDataFile: files.length > 0 ? files[0] : null,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <label>\r\n                      <strong>\r\n                        Select <span style={{ color: \"orange\" }}>CSV</span> ({\" \"}\r\n                        <span style={{ color: \"red\" }}>Data</span> ) file:{\" \"}\r\n                      </strong>\r\n                      <strong style={{ color: \"green\" }}>\r\n                        {this.state.csvDataFile && this.state.csvDataFile.name}\r\n                      </strong>\r\n                      <br />\r\n                      <button>Open Data File</button>\r\n                    </label>\r\n                  </ReactFileReader>\r\n                  <br />\r\n                  <ReactFileReader\r\n                    fileTypes={[\".csv\"]}\r\n                    handleFiles={(files) => {\r\n                      this.setState({\r\n                        csvMapFile: files.length > 0 ? files[0] : null,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <label>\r\n                      <strong>\r\n                        Select <span style={{ color: \"orange\" }}>CSV</span> ({\" \"}\r\n                        <span style={{ color: \"red\" }}>Map</span> ) file:{\" \"}\r\n                      </strong>\r\n                      <strong style={{ color: \"green\" }}>\r\n                        {this.state.csvMapFile && this.state.csvMapFile.name}\r\n                      </strong>\r\n                      <br />\r\n                      <button>Open Map File</button>\r\n                    </label>\r\n                  </ReactFileReader>\r\n                </>\r\n              ) : +this.state.dataSource === 3 ? (\r\n                <label>\r\n                  <strong>Select the Rest API for fetching the data:</strong>\r\n                  <br />\r\n                  <select\r\n                    value={this.state.restApiIdx}\r\n                    onChange={(e) =>\r\n                      this.setState({\r\n                        restApiIdx: e.target.value\r\n                      })\r\n                    }\r\n                  >\r\n                    {\r\n                      this.state.restApiArr.map(\r\n                        (elem, index) => (\r\n                          <option value={index}>{elem}</option>\r\n                        )\r\n                      )\r\n                    }\r\n                  </select>\r\n                  <br />\r\n                </label>\r\n              ) : null}\r\n              <br />\r\n              <input type=\"submit\" value=\"Load...\" onClick={this.onLoadClick} />\r\n            </form>\r\n          </>\r\n        </fieldset>\r\n      </>\r\n    );\r\n  }\r\n\r\n  onLoadClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    //TODO: comment\r\n    //console.log(this.state);\r\n\r\n    switch (+this.state.dataSource) {\r\n      case 1: {\r\n        //JSON FILE\r\n        if (!this.state.jsonDataFile)\r\n          alert(\"Json data file not properly selected, pls try again.\");\r\n        else this.loadJsonFile();        \r\n        break;\r\n      }\r\n      case 2: {\r\n        //CSV FILES\r\n        if (!this.state.csvDataFile || !this.state.csvMapFile)\r\n          alert(\"CSV Data or Map not properly selected, pls try again.\");\r\n        else this.loadCSVFiles();        \r\n        break;\r\n      }\r\n      case 3: {        \r\n        //FETCH FROM API / DB\r\n        this.fetchFromAPI();        \r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  refillCustRdxStore = (dataSetArr) => {\r\n\r\n    console.log(dataSetArr);\r\n\r\n    CustomersRdxManager.AddCustomerSet(dataSetArr);\r\n\r\n    //TODO: redirect/navegate to /customers\r\n    this.props.history && this.props.history.push(\"/customers\");\r\n\r\n    //TODO: Debug: Comment\r\n    console.log(CustomersRdxManager.state);\r\n  };\r\n\r\n  loadJsonFile = () => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"JsonFile reading was aborted\");\r\n    reader.onerror = () => console.log(\"JsonFile reading has failed\");\r\n    reader.onload = () => {\r\n      let dataSetArr = JSON.parse(reader.result);\r\n      dataSetArr = Array.isArray(dataSetArr) ? Array.from(dataSetArr) : [];\r\n\r\n      //TODO: comment\r\n      console.log(\" from JSON:\");\r\n      console.log(dataSetArr);\r\n\r\n      this.refillCustRdxStore(dataSetArr);\r\n    };\r\n    reader.readAsBinaryString(this.state.jsonDataFile);\r\n  };\r\n\r\n  loadCSVFiles = () => {\r\n    const csvParser = require(\"csvtojson\");\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"CsvFile reading was aborted\");\r\n    reader.onerror = () => console.log(\"CsvFile reading has failed\");\r\n    reader.onload = () => {\r\n      csvParser()\r\n        .fromString(reader.result)\r\n        .then(([Mapper]) => {\r\n          reader.onload = () => {\r\n            csvParser()\r\n              .fromString(reader.result)\r\n              .then((dataSetArr) => {\r\n                dataSetArr = dataSetArr.map((entry, i) => {\r\n                  const resultObj = { id: i + 1, updated_at: null };\r\n                  for (let key in Mapper) resultObj[key] = entry[Mapper[key]];\r\n                  return resultObj;\r\n                });\r\n\r\n                //TODO: comment\r\n                console.log(\"from CSV:\");\r\n                console.log(dataSetArr);\r\n\r\n                this.refillCustRdxStore(dataSetArr);\r\n              });\r\n          };\r\n          reader.readAsBinaryString(this.state.csvDataFile);\r\n        });\r\n    };\r\n    reader.readAsBinaryString(this.state.csvMapFile);\r\n  };\r\n\r\n  fetchFromAPI = () => {    \r\n    \r\n    let REST_API_URL =\r\n      this.state.restApiArr[this.state.restApiIdx]\r\n        .split(\"[\")[1]\r\n        .split(\"]\")[0]\r\n        .concat(\"/customers\");\r\n    \r\n    fetch(REST_API_URL)      \r\n      .then((res) => {\r\n        //console.log(res);\r\n        if (res.ok) return res.json();\r\n        alert(\"ERROR Fetching from: \" + REST_API_URL);\r\n        return [];\r\n      })\r\n      .then((json) => this.refillCustRdxStore(json))\r\n      .catch((err) => console.error(err));      \r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}