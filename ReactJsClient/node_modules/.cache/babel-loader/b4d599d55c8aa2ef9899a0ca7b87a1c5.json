{"ast":null,"code":"import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useGetMany } from '../../dataProvider';\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { ids, data, error, loaded, loading, referenceBasePath } = useReferenceArrayFieldController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {Object} option.record The The current resource record\n * @param {string} option.reference The linked resource name\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {ReferenceArrayProps} The reference props\n */\n\nvar useReferenceArrayFieldController = function useReferenceArrayFieldController(_a) {\n  var resource = _a.resource,\n      reference = _a.reference,\n      basePath = _a.basePath,\n      record = _a.record,\n      source = _a.source;\n  var ids = get(record, source) || [];\n\n  var _b = useGetMany(reference, ids),\n      data = _b.data,\n      error = _b.error,\n      loading = _b.loading,\n      loaded = _b.loaded;\n\n  var referenceBasePath = basePath.replace(resource, reference); // FIXME obviously very weak\n\n  return {\n    ids: ids,\n    data: useMemo(function () {\n      return indexById(data);\n    }, [data]),\n    error: error,\n    loaded: loaded,\n    loading: loading,\n    referenceBasePath: referenceBasePath\n  };\n};\n\nvar indexById = function indexById(records) {\n  if (records === void 0) {\n    records = [];\n  }\n\n  return records.filter(function (r) {\n    return typeof r !== 'undefined';\n  }).reduce(function (prev, current) {\n    prev[current.id] = current;\n    return prev;\n  }, {});\n};\n\nexport default useReferenceArrayFieldController;","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-core/esm/controller/field/useReferenceArrayFieldController.js"],"names":["useMemo","get","useGetMany","useReferenceArrayFieldController","_a","resource","reference","basePath","record","source","ids","_b","data","error","loading","loaded","referenceBasePath","replace","indexById","records","filter","r","reduce","prev","current","id"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAUC,EAAV,EAAc;AACjD,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,SAAS,GAAGF,EAAE,CAACE,SAA3C;AAAA,MAAsDC,QAAQ,GAAGH,EAAE,CAACG,QAApE;AAAA,MAA8EC,MAAM,GAAGJ,EAAE,CAACI,MAA1F;AAAA,MAAkGC,MAAM,GAAGL,EAAE,CAACK,MAA9G;AACA,MAAIC,GAAG,GAAGT,GAAG,CAACO,MAAD,EAASC,MAAT,CAAH,IAAuB,EAAjC;;AACA,MAAIE,EAAE,GAAGT,UAAU,CAACI,SAAD,EAAYI,GAAZ,CAAnB;AAAA,MAAqCE,IAAI,GAAGD,EAAE,CAACC,IAA/C;AAAA,MAAqDC,KAAK,GAAGF,EAAE,CAACE,KAAhE;AAAA,MAAuEC,OAAO,GAAGH,EAAE,CAACG,OAApF;AAAA,MAA6FC,MAAM,GAAGJ,EAAE,CAACI,MAAzG;;AACA,MAAIC,iBAAiB,GAAGT,QAAQ,CAACU,OAAT,CAAiBZ,QAAjB,EAA2BC,SAA3B,CAAxB,CAJiD,CAIc;;AAC/D,SAAO;AACHI,IAAAA,GAAG,EAAEA,GADF;AAEHE,IAAAA,IAAI,EAAEZ,OAAO,CAAC,YAAY;AAAE,aAAOkB,SAAS,CAACN,IAAD,CAAhB;AAAyB,KAAxC,EAA0C,CAACA,IAAD,CAA1C,CAFV;AAGHC,IAAAA,KAAK,EAAEA,KAHJ;AAIHE,IAAAA,MAAM,EAAEA,MAJL;AAKHD,IAAAA,OAAO,EAAEA,OALN;AAMHE,IAAAA,iBAAiB,EAAEA;AANhB,GAAP;AAQH,CAbD;;AAcA,IAAIE,SAAS,GAAG,SAAZA,SAAY,CAAUC,OAAV,EAAmB;AAC/B,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,SAAOA,OAAO,CACTC,MADE,CACK,UAAUC,CAAV,EAAa;AAAE,WAAO,OAAOA,CAAP,KAAa,WAApB;AAAkC,GADtD,EAEFC,MAFE,CAEK,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjCD,IAAAA,IAAI,CAACC,OAAO,CAACC,EAAT,CAAJ,GAAmBD,OAAnB;AACA,WAAOD,IAAP;AACH,GALM,EAKJ,EALI,CAAP;AAMH,CARD;;AASA,eAAepB,gCAAf","sourcesContent":["import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useGetMany } from '../../dataProvider';\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { ids, data, error, loaded, loading, referenceBasePath } = useReferenceArrayFieldController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {Object} option.record The The current resource record\n * @param {string} option.reference The linked resource name\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {ReferenceArrayProps} The reference props\n */\nvar useReferenceArrayFieldController = function (_a) {\n    var resource = _a.resource, reference = _a.reference, basePath = _a.basePath, record = _a.record, source = _a.source;\n    var ids = get(record, source) || [];\n    var _b = useGetMany(reference, ids), data = _b.data, error = _b.error, loading = _b.loading, loaded = _b.loaded;\n    var referenceBasePath = basePath.replace(resource, reference); // FIXME obviously very weak\n    return {\n        ids: ids,\n        data: useMemo(function () { return indexById(data); }, [data]),\n        error: error,\n        loaded: loaded,\n        loading: loading,\n        referenceBasePath: referenceBasePath,\n    };\n};\nvar indexById = function (records) {\n    if (records === void 0) { records = []; }\n    return records\n        .filter(function (r) { return typeof r !== 'undefined'; })\n        .reduce(function (prev, current) {\n        prev[current.id] = current;\n        return prev;\n    }, {});\n};\nexport default useReferenceArrayFieldController;\n"]},"metadata":{},"sourceType":"module"}