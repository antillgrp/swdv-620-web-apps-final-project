{"ast":null,"code":"import _toConsumableArray from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { createStore } from 'redux';\n\nvar CustomersRdxManager = /*#__PURE__*/function () {\n  _createClass(CustomersRdxManager, null, [{\n    key: \"initialState\",\n    //SINGLETON\n    get: function get() {\n      //action date/time for insert and update\n      // eslint-disable-next-line\n      var nowFormatedDate = new Date().toISOString(); // eslint-disable-next-line\n\n      nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\n      return {\n        //Customers\n        customers: [//Example\n          // {\n          //     id:-1,\n          //     email: \"noemail@email.com\",\n          //     first_name: \"dummy\",\n          //     last_name: \"dummy\",\n          //     ip: \"127.0.0.1\",\n          //     latitude: 0,\n          //     longitude: 0,\n          //     created_at: nowFormatedDate,\n          //     updated_at: nowFormatedDate\n          // }\n        ],\n        //Cart Products\n        deletedCusts: []\n        /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\n        //User logged in\n        // userLoggedInId:1,\n        // //user list\n        // users:[\n        //     { id:1, userName:'admin', password:'Passw0rd' },\n        // ]\n\n        /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\n\n      };\n    }\n  }, {\n    key: \"actionTypes\",\n    get: function get() {\n      return Object.freeze({\n        ADD_NEW_CUSTOMER: 'ADD_NEW_CUSTOMER',\n        ADD_CUSTOMER_SET: 'ADD_CUSTOMER_SET',\n        UPDATE_CUSTOMER: 'UPDATE_CUSTOMER',\n        DELETE_CUSTOMER: 'DELETE_CUSTOMER',\n        CLEANUP: 'CLEANUP'\n      });\n    }\n  }, {\n    key: \"customersReducer\",\n    get: function get() {\n      return function () {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CustomersRdxManager.initialState;\n        var action = arguments.length > 1 ? arguments[1] : undefined;\n        var customers = state.customers,\n            deletedCusts = state.deletedCusts; //action date/time for insert and update\n        // eslint-disable-next-line\n\n        var nowFormatedDate = new Date().toISOString(); // eslint-disable-next-line\n\n        nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\n\n        switch (action.type) {\n          case CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER:\n            {\n              //no validation done UI should be consistent\n              var newCustInfo = action.data.newCustInfo; //no id included => generated\n              //if store contains newCust already => do nothing ? or update (now => do nothing)(see UPDATE_CUSTOMER)\n\n              if (customers.some(function (c) {\n                return c.email === newCustInfo.email;\n              })) return state;\n              return _objectSpread(_objectSpread({}, state), {}, {\n                //adding the new cust\n                customers: [].concat(_toConsumableArray(customers), [// new customer\n                _objectSpread(_objectSpread({}, newCustInfo), {}, {\n                  //if brings id and id is not in use yet else generate it max+1\n                  id: newCustInfo.id && customers.findIndex(function (c) {\n                    return +c.id === newCustInfo.id;\n                  }) < 0 ? newCustInfo.id : // calculation generating next id (max + 1)\n                  +customers.reduce(function (max, next) {\n                    return +max.id > +next.id ? max : next;\n                  }).id + 1,\n                  // now date formating\n                  created_at: nowFormatedDate,\n                  updated_at: nowFormatedDate\n                })])\n              });\n            }\n\n          case CustomersRdxManager.actionTypes.UPDATE_CUSTOMER:\n            {\n              var updCustInfo = action.data.updCustInfo; //id included\n\n              var updatedIndex = customers.findIndex(function (c) {\n                return +c.id === +updCustInfo.id;\n              });\n              if (updatedIndex < 0) return state; //do nothing no error\n              //make sure at LEAST ONE of the editable field has changed else do nothing\n\n              for (var key in updCustInfo) {\n                if (updCustInfo[key] !== customers[updatedIndex][key]) //change found\n                  return _objectSpread(_objectSpread({}, state), {}, {\n                    customers: [].concat(_toConsumableArray(customers.slice(0, updatedIndex)), [_objectSpread(_objectSpread(_objectSpread({}, customers[updatedIndex]), updCustInfo), {}, {\n                      //overwrite what changed\n                      updated_at: nowFormatedDate\n                    })])\n                  });\n              }\n\n              return state;\n            }\n\n          case CustomersRdxManager.actionTypes.DELETE_CUSTOMER:\n            {\n              var id = action.data.id;\n              var deleteIndex = customers.findIndex(function (curr) {\n                return +curr.id === +id;\n              });\n              if (deleteIndex < 0) return state; //do nothing no error\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                //add it to deletedCusts\n                deletedCusts: [].concat(_toConsumableArray(deletedCusts), [_objectSpread({}, customers[deleteIndex])]),\n                //remove it from customers\n                customers: [].concat(_toConsumableArray(customers.slice(0, deleteIndex)), _toConsumableArray(customers.slice(deleteIndex + 1)))\n              });\n            }\n\n          case CustomersRdxManager.actionTypes.CLEANUP:\n            {\n              return _objectSpread({}, CustomersRdxManager.initialState);\n            }\n\n          case CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET:\n            {\n              /**\r\n               * AVOID TO COMBINE SETs FROM DIFFERENT DATASOURCES INSIDE THE STORE\r\n               */\n              var dataSetArr = action.data.dataSetArr;\n              return _objectSpread(_objectSpread({}, CustomersRdxManager.initialState), {}, {\n                customers: _toConsumableArray(dataSetArr)\n              });\n            }\n\n          default:\n            return state;\n        }\n      };\n    }\n  }, {\n    key: \"ActionAddNewCustomer\",\n    get: function get() {\n      return function (newCustInfo) {\n        return {\n          type: CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER,\n          data: {\n            newCustInfo: newCustInfo\n          }\n        };\n      };\n    }\n  }, {\n    key: \"ActionUpdateCustomer\",\n    get: function get() {\n      return function (updCustInfo) {\n        return {\n          type: CustomersRdxManager.actionTypes.UPDATE_CUSTOMER,\n          data: {\n            updCustInfo: updCustInfo\n          }\n        };\n      };\n    }\n  }, {\n    key: \"ActionDeleteCustomer\",\n    get: function get() {\n      return function (id) {\n        return {\n          type: CustomersRdxManager.actionTypes.DELETE_CUSTOMER,\n          data: {\n            id: id\n          }\n        };\n      };\n    }\n  }, {\n    key: \"ActionStoreCleanup\",\n    get: function get() {\n      return function () {\n        return {\n          type: CustomersRdxManager.actionTypes.CLEANUP,\n          data: {}\n        };\n      };\n    }\n  }, {\n    key: \"ActionAddCustomerSet\",\n    get: function get() {\n      return function (dataSetArr) {\n        return {\n          type: CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET,\n          data: {\n            dataSetArr: dataSetArr\n          }\n        };\n      };\n    }\n  }]);\n\n  function CustomersRdxManager() {\n    var _this = this;\n\n    _classCallCheck(this, CustomersRdxManager);\n\n    this.reduxStore = createStore(CustomersRdxManager.customersReducer);\n\n    this.AddNewCustomer = function (newCustInfo) {\n      return _this.reduxStore.dispatch(CustomersRdxManager.ActionAddNewCustomer(newCustInfo));\n    };\n\n    this.UpdateCustomer = function (updCustInfo) {\n      return _this.reduxStore.dispatch(CustomersRdxManager.ActionUpdateCustomer(updCustInfo));\n    };\n\n    this.DeleteCustomer = function (id) {\n      return _this.reduxStore.dispatch(CustomersRdxManager.ActionDeleteCustomer(id));\n    };\n\n    this.StoreCleanup = function () {\n      return _this.reduxStore.dispatch(CustomersRdxManager.ActionStoreCleanup());\n    };\n\n    this.AddCustomerSet = function (dataSetArr) {\n      return _this.reduxStore.dispatch(CustomersRdxManager.ActionAddCustomerSet(dataSetArr));\n    };\n\n    this.subscribe = function (callback) {\n      return _this.reduxStore.subscribe(callback);\n    };\n\n    Object.freeze(this); //set \"final\" the redux\n  }\n\n  _createClass(CustomersRdxManager, [{\n    key: \"state\",\n    get: function get() {\n      return this.reduxStore.getState();\n    }\n  }]);\n\n  return CustomersRdxManager;\n}(); //SINGLETON\n\n\nvar RdxManager = new CustomersRdxManager();\nexport default RdxManager;","map":{"version":3,"sources":["/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/src/Etl/CustomersRdxManager.js"],"names":["createStore","CustomersRdxManager","nowFormatedDate","Date","toISOString","split","customers","deletedCusts","Object","freeze","ADD_NEW_CUSTOMER","ADD_CUSTOMER_SET","UPDATE_CUSTOMER","DELETE_CUSTOMER","CLEANUP","state","initialState","action","type","actionTypes","newCustInfo","data","some","c","email","id","findIndex","reduce","max","next","created_at","updated_at","updCustInfo","updatedIndex","key","slice","deleteIndex","curr","dataSetArr","reduxStore","customersReducer","AddNewCustomer","dispatch","ActionAddNewCustomer","UpdateCustomer","ActionUpdateCustomer","DeleteCustomer","ActionDeleteCustomer","StoreCleanup","ActionStoreCleanup","AddCustomerSet","ActionAddCustomerSet","subscribe","callback","getState","RdxManager"],"mappings":"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","sourcesContent":["import { createStore } from 'redux';\r\n\r\nclass CustomersRdxManager{ //SINGLETON\r\n\r\n    static get initialState() {\r\n        //action date/time for insert and update\r\n        // eslint-disable-next-line\r\n        let nowFormatedDate = new Date().toISOString();\r\n        // eslint-disable-next-line\r\n        nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n        return {\r\n            //Customers\r\n            customers: [\r\n                //Example\r\n                // {\r\n                //     id:-1,\r\n                //     email: \"noemail@email.com\",\r\n                //     first_name: \"dummy\",\r\n                //     last_name: \"dummy\",\r\n                //     ip: \"127.0.0.1\",\r\n                //     latitude: 0,\r\n                //     longitude: 0,\r\n                //     created_at: nowFormatedDate,\r\n                //     updated_at: nowFormatedDate\r\n                // }\r\n            ],\r\n            //Cart Products\r\n            deletedCusts:[],\r\n\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n            //User logged in\r\n            // userLoggedInId:1,\r\n            // //user list\r\n            // users:[\r\n            //     { id:1, userName:'admin', password:'Passw0rd' },\r\n            // ]\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n        };\r\n    }\r\n    static get actionTypes() {\r\n        return Object.freeze({\r\n            ADD_NEW_CUSTOMER:'ADD_NEW_CUSTOMER',\r\n            ADD_CUSTOMER_SET:'ADD_CUSTOMER_SET',\r\n            UPDATE_CUSTOMER:'UPDATE_CUSTOMER',\r\n            DELETE_CUSTOMER:'DELETE_CUSTOMER',\r\n            CLEANUP:'CLEANUP',\r\n        });\r\n    }\r\n    static get customersReducer() {\r\n        return (\r\n            state=CustomersRdxManager.initialState,\r\n            action\r\n        ) => {\r\n            const { customers, deletedCusts } = state;\r\n\r\n            //action date/time for insert and update\r\n            // eslint-disable-next-line\r\n            let nowFormatedDate = new Date().toISOString();\r\n            // eslint-disable-next-line\r\n            nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n            switch (action.type) {\r\n                case CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER: {\r\n                    //no validation done UI should be consistent\r\n                    const {newCustInfo} = action.data; //no id included => generated\r\n\r\n                    //if store contains newCust already => do nothing ? or update (now => do nothing)(see UPDATE_CUSTOMER)\r\n                    if(customers.some(c => c.email === newCustInfo.email)) return state;\r\n\r\n                    return { //new state with the new cust\r\n                        ...state,\r\n                        //adding the new cust\r\n                        customers: [\r\n                            ...customers,\r\n                            // new customer\r\n                            {\r\n                                ...newCustInfo,\r\n                                //if brings id and id is not in use yet else generate it max+1\r\n                                id: newCustInfo.id\r\n                                    &&\r\n                                    customers.findIndex(c => +c.id === newCustInfo.id) < 0\r\n                                    ?\r\n                                        newCustInfo.id\r\n                                    :\r\n                                        // calculation generating next id (max + 1)\r\n                                        +customers.reduce(\r\n                                            (max,next) => (+max.id > +next.id) ? max : next\r\n                                        ).id + 1,\r\n                                // now date formating\r\n                                created_at: nowFormatedDate,\r\n                                updated_at: nowFormatedDate\r\n                            }\r\n                        ]\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.UPDATE_CUSTOMER: {\r\n\r\n                    const {updCustInfo} = action.data; //id included\r\n\r\n                    const updatedIndex = customers.findIndex(c => +c.id === +updCustInfo.id);\r\n                    if(updatedIndex < 0) return state; //do nothing no error\r\n\r\n                    //make sure at LEAST ONE of the editable field has changed else do nothing\r\n                    for(let key in updCustInfo) {\r\n                        if(updCustInfo[key] !== customers[updatedIndex][key]) //change found\r\n                        return {\r\n                            ...state,\r\n                            customers: [\r\n                                ...customers.slice(0,updatedIndex),\r\n                                { //updated cust\r\n                                    ...customers[updatedIndex],\r\n                                    ...updCustInfo, //overwrite what changed\r\n                                    updated_at: nowFormatedDate\r\n                                },\r\n                            ]\r\n                        };\r\n                    }\r\n                    return state;\r\n                }\r\n                case CustomersRdxManager.actionTypes.DELETE_CUSTOMER: {\r\n\r\n                    const {id} = action.data;\r\n\r\n                    const deleteIndex = customers.findIndex(curr => +curr.id === +id);\r\n                    if(deleteIndex < 0) return state; //do nothing no error\r\n\r\n                    return {\r\n                        ...state,\r\n                        //add it to deletedCusts\r\n                        deletedCusts:[\r\n                            ...deletedCusts,\r\n                            { ...customers[deleteIndex] }\r\n                        ],\r\n                        //remove it from customers\r\n                        customers:[\r\n                            ...customers.slice(0,deleteIndex),\r\n                            ...customers.slice(deleteIndex + 1)\r\n                        ],\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.CLEANUP: {\r\n                    return { ...CustomersRdxManager.initialState };\r\n                }\r\n                case CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET: {\r\n                    /**\r\n                     * AVOID TO COMBINE SETs FROM DIFFERENT DATASOURCES INSIDE THE STORE\r\n                     */\r\n\r\n                    const {dataSetArr} = action.data;\r\n\r\n                    return {\r\n                        //cleanup first\r\n                        ...CustomersRdxManager.initialState,\r\n                        customers: [\r\n                            //...CustomersRdxManager.initialState.customers, //should be empty\r\n                            ...dataSetArr\r\n                        ]\r\n                    };\r\n                }\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    }\r\n    static get ActionAddNewCustomer(){\r\n        return (newCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER,\r\n            data:{newCustInfo:newCustInfo},\r\n        });\r\n    }\r\n    static get ActionUpdateCustomer(){\r\n        return (updCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.UPDATE_CUSTOMER,\r\n            data:{ updCustInfo:updCustInfo },\r\n        });\r\n    }\r\n    static get ActionDeleteCustomer(){\r\n        return (id) => ({\r\n            type:CustomersRdxManager.actionTypes.DELETE_CUSTOMER,\r\n            data:{ id:id },\r\n        });\r\n    }\r\n    static get ActionStoreCleanup(){\r\n        return () => ({\r\n            type:CustomersRdxManager.actionTypes.CLEANUP,\r\n            data:{},\r\n        });\r\n    }\r\n    static get ActionAddCustomerSet(){\r\n        return (dataSetArr) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET,\r\n            data:{dataSetArr:dataSetArr},\r\n        });\r\n    }\r\n\r\n    constructor (){\r\n        this.reduxStore = createStore(CustomersRdxManager.customersReducer);\r\n\r\n        this.AddNewCustomer = (newCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddNewCustomer(newCustInfo)\r\n        );\r\n\r\n        this.UpdateCustomer = (updCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionUpdateCustomer(updCustInfo)\r\n        );\r\n\r\n        this.DeleteCustomer = (id) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionDeleteCustomer(id)\r\n        );\r\n\r\n        this.StoreCleanup = () => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionStoreCleanup()\r\n        );\r\n\r\n        this.AddCustomerSet = (dataSetArr) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddCustomerSet(dataSetArr)\r\n        );\r\n\r\n        this.subscribe = (callback) => this.reduxStore.subscribe(callback);\r\n\r\n        Object.freeze(this); //set \"final\" the redux\r\n    }\r\n\r\n    get state () {\r\n        return this.reduxStore.getState();\r\n    }\r\n}\r\n\r\n//SINGLETON\r\nconst RdxManager = new CustomersRdxManager();\r\nexport default RdxManager;"]},"metadata":{},"sourceType":"module"}