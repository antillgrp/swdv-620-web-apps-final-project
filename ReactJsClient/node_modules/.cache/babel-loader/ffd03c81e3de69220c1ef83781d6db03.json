{"ast":null,"code":"import useQueryWithStore from './useQueryWithStore';\n/**\n * Call the dataProvider.getOne() method and return the resolved value\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetOne } from 'react-admin';\n *\n * const UserProfile = ({ record }) => {\n *     const { data, loading, error } = useGetOne('users', record.id);\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <div>User {data.username}</div>;\n * };\n */\n\nvar useGetOne = function useGetOne(resource, id, options) {\n  return useQueryWithStore({\n    type: 'getOne',\n    resource: resource,\n    payload: {\n      id: id\n    }\n  }, options, function (state) {\n    if (!state.admin.resources[resource]) {\n      throw new Error(\"No <Resource> defined for \\\"\" + resource + \"\\\". useGetOne() relies on the Redux store, so it cannot work if you don't include a <Resource>.\");\n    }\n\n    return state.admin.resources[resource].data[id];\n  });\n};\n\nexport default useGetOne;","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-core/esm/dataProvider/useGetOne.js"],"names":["useQueryWithStore","useGetOne","resource","id","options","type","payload","state","admin","resources","Error","data"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,QAAV,EAAoBC,EAApB,EAAwBC,OAAxB,EAAiC;AAC7C,SAAOJ,iBAAiB,CAAC;AAAEK,IAAAA,IAAI,EAAE,QAAR;AAAkBH,IAAAA,QAAQ,EAAEA,QAA5B;AAAsCI,IAAAA,OAAO,EAAE;AAAEH,MAAAA,EAAE,EAAEA;AAAN;AAA/C,GAAD,EAA8DC,OAA9D,EAAuE,UAAUG,KAAV,EAAiB;AAC5G,QAAI,CAACA,KAAK,CAACC,KAAN,CAAYC,SAAZ,CAAsBP,QAAtB,CAAL,EAAsC;AAClC,YAAM,IAAIQ,KAAJ,CAAU,iCAAiCR,QAAjC,GAA4C,iGAAtD,CAAN;AACH;;AACD,WAAOK,KAAK,CAACC,KAAN,CAAYC,SAAZ,CAAsBP,QAAtB,EAAgCS,IAAhC,CAAqCR,EAArC,CAAP;AACH,GALuB,CAAxB;AAMH,CAPD;;AAQA,eAAeF,SAAf","sourcesContent":["import useQueryWithStore from './useQueryWithStore';\n/**\n * Call the dataProvider.getOne() method and return the resolved value\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetOne } from 'react-admin';\n *\n * const UserProfile = ({ record }) => {\n *     const { data, loading, error } = useGetOne('users', record.id);\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <div>User {data.username}</div>;\n * };\n */\nvar useGetOne = function (resource, id, options) {\n    return useQueryWithStore({ type: 'getOne', resource: resource, payload: { id: id } }, options, function (state) {\n        if (!state.admin.resources[resource]) {\n            throw new Error(\"No <Resource> defined for \\\"\" + resource + \"\\\". useGetOne() relies on the Redux store, so it cannot work if you don't include a <Resource>.\");\n        }\n        return state.admin.resources[resource].data[id];\n    });\n};\nexport default useGetOne;\n"]},"metadata":{},"sourceType":"module"}