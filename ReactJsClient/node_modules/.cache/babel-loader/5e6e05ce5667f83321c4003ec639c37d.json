{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { cloneElement, Children, useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  data: {},\n  ids: []\n};\n\nvar getDataAndIds = function getDataAndIds(record, source, fieldKey) {\n  var list = get(record, source);\n\n  if (!list) {\n    return initialState;\n  }\n\n  return fieldKey ? {\n    data: list.reduce(function (prev, item) {\n      prev[item[fieldKey]] = item;\n      return prev;\n    }, {}),\n    ids: list.map(function (item) {\n      return item[fieldKey];\n    })\n  } : {\n    data: list.reduce(function (prev, item) {\n      prev[JSON.stringify(item)] = item;\n      return prev;\n    }, {}),\n    ids: list.map(JSON.stringify)\n  };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     )\n *     TagsField.defaultProps = { addLabel: true };\n */\n\n\nexport var ArrayField = memo(function (_a) {\n  var addLabel = _a.addLabel,\n      basePath = _a.basePath,\n      children = _a.children,\n      record = _a.record,\n      sortable = _a.sortable,\n      source = _a.source,\n      fieldKey = _a.fieldKey,\n      rest = __rest(_a, [\"addLabel\", \"basePath\", \"children\", \"record\", \"sortable\", \"source\", \"fieldKey\"]);\n\n  var _b = useState(initialState.ids),\n      ids = _b[0],\n      setIds = _b[1];\n\n  var _c = useState(initialState.data),\n      data = _c[0],\n      setData = _c[1];\n\n  useEffect(function () {\n    var _a = getDataAndIds(record, source, fieldKey),\n        ids = _a.ids,\n        data = _a.data;\n\n    setIds(ids);\n    setData(data);\n  }, [record, source, fieldKey]); // @ts-ignore\n\n  return cloneElement(Children.only(children), __assign({\n    ids: ids,\n    data: data,\n    loading: false,\n    basePath: basePath,\n    currentSort: {}\n  }, rest));\n});\nArrayField.defaultProps = {\n  addLabel: true\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  fieldKey: PropTypes.string\n});\nexport default ArrayField;","map":{"version":3,"sources":["/home/toor/Development/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-ui-materialui/esm/field/ArrayField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","cloneElement","Children","useEffect","useState","memo","get","fieldPropTypes","PropTypes","initialState","data","ids","getDataAndIds","record","source","fieldKey","list","reduce","prev","item","map","JSON","stringify","ArrayField","_a","addLabel","basePath","children","sortable","rest","_b","setIds","_c","setData","only","loading","currentSort","defaultProps","propTypes","string"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { cloneElement, Children, useEffect, useState, memo, } from 'react';\nimport get from 'lodash/get';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n    data: {},\n    ids: [],\n};\nvar getDataAndIds = function (record, source, fieldKey) {\n    var list = get(record, source);\n    if (!list) {\n        return initialState;\n    }\n    return fieldKey\n        ? {\n            data: list.reduce(function (prev, item) {\n                prev[item[fieldKey]] = item;\n                return prev;\n            }, {}),\n            ids: list.map(function (item) { return item[fieldKey]; }),\n        }\n        : {\n            data: list.reduce(function (prev, item) {\n                prev[JSON.stringify(item)] = item;\n                return prev;\n            }, {}),\n            ids: list.map(JSON.stringify),\n        };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     )\n *     TagsField.defaultProps = { addLabel: true };\n */\nexport var ArrayField = memo(function (_a) {\n    var addLabel = _a.addLabel, basePath = _a.basePath, children = _a.children, record = _a.record, sortable = _a.sortable, source = _a.source, fieldKey = _a.fieldKey, rest = __rest(_a, [\"addLabel\", \"basePath\", \"children\", \"record\", \"sortable\", \"source\", \"fieldKey\"]);\n    var _b = useState(initialState.ids), ids = _b[0], setIds = _b[1];\n    var _c = useState(initialState.data), data = _c[0], setData = _c[1];\n    useEffect(function () {\n        var _a = getDataAndIds(record, source, fieldKey), ids = _a.ids, data = _a.data;\n        setIds(ids);\n        setData(data);\n    }, [record, source, fieldKey]);\n    // @ts-ignore\n    return cloneElement(Children.only(children), __assign({ ids: ids,\n        data: data, loading: false, basePath: basePath, currentSort: {} }, rest));\n});\nArrayField.defaultProps = {\n    addLabel: true,\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { fieldKey: PropTypes.string });\nexport default ArrayField;\n"]},"metadata":{},"sourceType":"module"}