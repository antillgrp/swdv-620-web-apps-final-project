{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Fragment, cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { usePaginationState, useReferenceManyFieldController, useSortState } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nexport var ReferenceManyField = function ReferenceManyField(props) {\n  var children = props.children,\n      initialSort = props.sort,\n      initialPerPage = props.perPage,\n      resource = props.resource,\n      reference = props.reference,\n      record = props.record,\n      target = props.target,\n      filter = props.filter,\n      source = props.source,\n      basePath = props.basePath;\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n  }\n\n  var _a = useSortState(initialSort),\n      sort = _a.sort,\n      setSortField = _a.setSortField;\n\n  var _b = usePaginationState({\n    perPage: initialPerPage\n  }),\n      page = _b.page,\n      perPage = _b.perPage,\n      setPage = _b.setPage,\n      setPerPage = _b.setPerPage;\n\n  var controllerProps = useReferenceManyFieldController({\n    resource: resource,\n    reference: reference,\n    record: record,\n    target: target,\n    filter: filter,\n    source: source,\n    basePath: basePath,\n    page: page,\n    perPage: perPage,\n    sort: sort\n  });\n  return React.createElement(ReferenceManyFieldView, __assign({}, props, __assign({\n    currentSort: sort,\n    page: page,\n    perPage: perPage,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSortField\n  }, controllerProps)));\n};\nReferenceManyField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id',\n  addLabel: true\n};\nexport var ReferenceManyFieldView = function ReferenceManyFieldView(_a) {\n  var children = _a.children,\n      className = _a.className,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      ids = _a.ids,\n      loaded = _a.loaded,\n      page = _a.page,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      total = _a.total;\n  return React.createElement(Fragment, null, cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    loaded: loaded,\n    data: data,\n    basePath: referenceBasePath,\n    currentSort: currentSort,\n    setSort: setSort,\n    total: total\n  }), pagination && total !== undefined && cloneElement(pagination, {\n    page: page,\n    perPage: perPage,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    total: total\n  }));\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  referenceBasePath: PropTypes.string,\n  setSort: PropTypes.func\n};\nexport default ReferenceManyField;","map":{"version":3,"sources":["/home/toor/Development/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-ui-materialui/esm/field/ReferenceManyField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","Fragment","cloneElement","Children","PropTypes","usePaginationState","useReferenceManyFieldController","useSortState","fieldPropTypes","ReferenceManyField","props","children","initialSort","sort","initialPerPage","perPage","resource","reference","record","target","filter","source","basePath","count","Error","_a","setSortField","_b","page","setPage","setPerPage","controllerProps","createElement","ReferenceManyFieldView","currentSort","setSort","propTypes","addLabel","bool","string","element","isRequired","className","object","label","number","any","sortBy","sortByOrder","exact","field","order","defaultProps","data","ids","loaded","pagination","referenceBasePath","total","only","undefined","array","func"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Fragment, cloneElement, Children, } from 'react';\nimport PropTypes from 'prop-types';\nimport { usePaginationState, useReferenceManyFieldController, useSortState, } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (props) {\n    var children = props.children, initialSort = props.sort, initialPerPage = props.perPage, resource = props.resource, reference = props.reference, record = props.record, target = props.target, filter = props.filter, source = props.source, basePath = props.basePath;\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n    }\n    var _a = useSortState(initialSort), sort = _a.sort, setSortField = _a.setSortField;\n    var _b = usePaginationState({\n        perPage: initialPerPage,\n    }), page = _b.page, perPage = _b.perPage, setPage = _b.setPage, setPerPage = _b.setPerPage;\n    var controllerProps = useReferenceManyFieldController({\n        resource: resource,\n        reference: reference,\n        record: record,\n        target: target,\n        filter: filter,\n        source: source,\n        basePath: basePath,\n        page: page,\n        perPage: perPage,\n        sort: sort,\n    });\n    return (React.createElement(ReferenceManyFieldView, __assign({}, props, __assign({ currentSort: sort, page: page,\n        perPage: perPage,\n        setPage: setPage,\n        setPerPage: setPerPage, setSort: setSortField }, controllerProps))));\n};\nReferenceManyField.propTypes = {\n    addLabel: PropTypes.bool,\n    basePath: PropTypes.string,\n    children: PropTypes.element.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n    addLabel: true,\n};\nexport var ReferenceManyFieldView = function (_a) {\n    var children = _a.children, className = _a.className, currentSort = _a.currentSort, data = _a.data, ids = _a.ids, loaded = _a.loaded, page = _a.page, pagination = _a.pagination, perPage = _a.perPage, reference = _a.reference, referenceBasePath = _a.referenceBasePath, setPage = _a.setPage, setPerPage = _a.setPerPage, setSort = _a.setSort, total = _a.total;\n    return (React.createElement(Fragment, null,\n        cloneElement(Children.only(children), {\n            className: className,\n            resource: reference,\n            ids: ids,\n            loaded: loaded,\n            data: data,\n            basePath: referenceBasePath,\n            currentSort: currentSort,\n            setSort: setSort,\n            total: total,\n        }),\n        pagination &&\n            total !== undefined &&\n            cloneElement(pagination, {\n                page: page,\n                perPage: perPage,\n                setPage: setPage,\n                setPerPage: setPerPage,\n                total: total,\n            })));\n};\nReferenceManyFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    currentSort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    referenceBasePath: PropTypes.string,\n    setSort: PropTypes.func,\n};\nexport default ReferenceManyField;\n"]},"metadata":{},"sourceType":"module"}