{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useRef, useCallback, useMemo } from 'react';\nimport { Form } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport useInitializeFormWithRecord from './useInitializeFormWithRecord';\nimport useWarnWhenUnsavedChanges from './useWarnWhenUnsavedChanges';\nimport sanitizeEmptyValues from './sanitizeEmptyValues';\nimport getFormInitialValues from './getFormInitialValues';\nimport FormContext from './FormContext';\n/**\n * Wrapper around react-final-form's Form to handle redirection on submit,\n * legacy defaultValue prop, and array inputs.\n *\n * Requires a render function, just like react-final-form\n *\n * @example\n *\n * const SimpleForm = props => (\n *    <FormWithRedirect\n *        {...props}\n *        render={formProps => <SimpleFormView {...formProps} />}\n *    />\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {Object} initialValues\n * @prop {Function} validate\n * @prop {Function} save\n * @prop {boolean} submitOnEnter\n * @prop {string} redirect\n *\n * @param {Prop} props\n */\n\nvar FormWithRedirect = function FormWithRedirect(_a) {\n  var debug = _a.debug,\n      decorators = _a.decorators,\n      defaultValue = _a.defaultValue,\n      destroyOnUnregister = _a.destroyOnUnregister,\n      form = _a.form,\n      initialValues = _a.initialValues,\n      initialValuesEqual = _a.initialValuesEqual,\n      _b = _a.keepDirtyOnReinitialize,\n      keepDirtyOnReinitialize = _b === void 0 ? true : _b,\n      _c = _a.mutators,\n      mutators = _c === void 0 ? arrayMutators : _c,\n      // FIXME see https://github.com/final-form/react-final-form/issues/704 and https://github.com/microsoft/TypeScript/issues/35771\n  record = _a.record,\n      render = _a.render,\n      save = _a.save,\n      saving = _a.saving,\n      _d = _a.subscription,\n      subscription = _d === void 0 ? defaultSubscription : _d,\n      validate = _a.validate,\n      validateOnBlur = _a.validateOnBlur,\n      version = _a.version,\n      warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n      props = __rest(_a, [\"debug\", \"decorators\", \"defaultValue\", \"destroyOnUnregister\", \"form\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"record\", \"render\", \"save\", \"saving\", \"subscription\", \"validate\", \"validateOnBlur\", \"version\", \"warnWhenUnsavedChanges\"]);\n\n  var redirect = useRef(props.redirect);\n  var onSave = useRef(save); // We don't use state here for two reasons:\n  // 1. There no way to execute code only after the state has been updated\n  // 2. We don't want the form to rerender when redirect is changed\n\n  var setRedirect = function setRedirect(newRedirect) {\n    redirect.current = newRedirect;\n  };\n  /**\n   * A form can have several Save buttons. In case the user clicks on\n   * a Save button with a custom onSave handler, then on a second Save button\n   * without custom onSave handler, the user expects the default save\n   * handler (the one of the Form) to be called.\n   * That's why the SaveButton onClick calls setOnSave() with no parameters\n   * if it has no custom onSave, and why this function forces a default to\n   * save.\n   */\n\n\n  var setOnSave = useCallback(function (newOnSave) {\n    typeof newOnSave === 'function' ? onSave.current = newOnSave : onSave.current = save;\n  }, [save]);\n  var formContextValue = useMemo(function () {\n    return {\n      setOnSave: setOnSave\n    };\n  }, [setOnSave]);\n  var finalInitialValues = getFormInitialValues(initialValues, defaultValue, record);\n\n  var submit = function submit(values) {\n    var finalRedirect = typeof redirect.current === undefined ? props.redirect : redirect.current;\n    var finalValues = sanitizeEmptyValues(finalInitialValues, values);\n    onSave.current(finalValues, finalRedirect);\n  };\n\n  return React.createElement(FormContext.Provider, {\n    value: formContextValue\n  }, React.createElement(Form, {\n    key: version,\n    debug: debug,\n    decorators: decorators,\n    destroyOnUnregister: destroyOnUnregister,\n    form: form,\n    initialValues: finalInitialValues,\n    initialValuesEqual: initialValuesEqual,\n    keepDirtyOnReinitialize: keepDirtyOnReinitialize,\n    mutators: mutators,\n    onSubmit: submit,\n    subscription: subscription,\n    validate: validate,\n    validateOnBlur: validateOnBlur\n  }, function (formProps) {\n    return React.createElement(FormView, __assign({}, props, formProps, {\n      record: record,\n      setRedirect: setRedirect,\n      saving: formProps.submitting || saving,\n      render: render,\n      save: save,\n      warnWhenUnsavedChanges: warnWhenUnsavedChanges\n    }));\n  }));\n};\n\nvar defaultSubscription = {\n  submitting: true,\n  pristine: true,\n  valid: true,\n  invalid: true\n};\n\nvar FormView = function FormView(_a) {\n  var render = _a.render,\n      warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n      props = __rest(_a, [\"render\", \"warnWhenUnsavedChanges\"]); // if record changes (after a getOne success or a refresh), the form must be updated\n\n\n  useInitializeFormWithRecord(props.record);\n  useWarnWhenUnsavedChanges(warnWhenUnsavedChanges);\n  var redirect = props.redirect,\n      setRedirect = props.setRedirect,\n      handleSubmit = props.handleSubmit;\n  /**\n   * We want to let developers define the redirection target from inside the form,\n   * e.g. in a <SaveButton redirect=\"list\" />.\n   * This callback does two things: handle submit, and change the redirection target.\n   * The actual redirection is done in save(), passed by the main controller.\n   *\n   * If the redirection target doesn't depend on the button clicked, it's a\n   * better option to define it directly on the Form component. In that case,\n   * using handleSubmit() instead of handleSubmitWithRedirect is fine.\n   *\n   * @example\n   *\n   * <Button onClick={() => handleSubmitWithRedirect('edit')}>\n   *     Save and edit\n   * </Button>\n   */\n\n  var handleSubmitWithRedirect = useCallback(function (redirectTo) {\n    if (redirectTo === void 0) {\n      redirectTo = redirect;\n    }\n\n    setRedirect(redirectTo);\n    handleSubmit();\n  }, [setRedirect, redirect, handleSubmit]);\n  return render(__assign(__assign({}, props), {\n    handleSubmitWithRedirect: handleSubmitWithRedirect\n  }));\n};\n\nexport default FormWithRedirect;","map":{"version":3,"sources":["/home/toor/Development/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-core/esm/form/FormWithRedirect.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useRef","useCallback","useMemo","Form","arrayMutators","useInitializeFormWithRecord","useWarnWhenUnsavedChanges","sanitizeEmptyValues","getFormInitialValues","FormContext","FormWithRedirect","_a","debug","decorators","defaultValue","destroyOnUnregister","form","initialValues","initialValuesEqual","_b","keepDirtyOnReinitialize","_c","mutators","record","render","save","saving","_d","subscription","defaultSubscription","validate","validateOnBlur","version","warnWhenUnsavedChanges","props","redirect","onSave","setRedirect","newRedirect","current","setOnSave","newOnSave","formContextValue","finalInitialValues","submit","values","finalRedirect","undefined","finalValues","createElement","Provider","value","key","onSubmit","formProps","FormView","submitting","pristine","valid","invalid","handleSubmit","handleSubmitWithRedirect","redirectTo"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useRef, useCallback, useMemo } from 'react';\nimport { Form } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport useInitializeFormWithRecord from './useInitializeFormWithRecord';\nimport useWarnWhenUnsavedChanges from './useWarnWhenUnsavedChanges';\nimport sanitizeEmptyValues from './sanitizeEmptyValues';\nimport getFormInitialValues from './getFormInitialValues';\nimport FormContext from './FormContext';\n/**\n * Wrapper around react-final-form's Form to handle redirection on submit,\n * legacy defaultValue prop, and array inputs.\n *\n * Requires a render function, just like react-final-form\n *\n * @example\n *\n * const SimpleForm = props => (\n *    <FormWithRedirect\n *        {...props}\n *        render={formProps => <SimpleFormView {...formProps} />}\n *    />\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {Object} initialValues\n * @prop {Function} validate\n * @prop {Function} save\n * @prop {boolean} submitOnEnter\n * @prop {string} redirect\n *\n * @param {Prop} props\n */\nvar FormWithRedirect = function (_a) {\n    var debug = _a.debug, decorators = _a.decorators, defaultValue = _a.defaultValue, destroyOnUnregister = _a.destroyOnUnregister, form = _a.form, initialValues = _a.initialValues, initialValuesEqual = _a.initialValuesEqual, _b = _a.keepDirtyOnReinitialize, keepDirtyOnReinitialize = _b === void 0 ? true : _b, _c = _a.mutators, mutators = _c === void 0 ? arrayMutators : _c, // FIXME see https://github.com/final-form/react-final-form/issues/704 and https://github.com/microsoft/TypeScript/issues/35771\n    record = _a.record, render = _a.render, save = _a.save, saving = _a.saving, _d = _a.subscription, subscription = _d === void 0 ? defaultSubscription : _d, validate = _a.validate, validateOnBlur = _a.validateOnBlur, version = _a.version, warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges, props = __rest(_a, [\"debug\", \"decorators\", \"defaultValue\", \"destroyOnUnregister\", \"form\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"record\", \"render\", \"save\", \"saving\", \"subscription\", \"validate\", \"validateOnBlur\", \"version\", \"warnWhenUnsavedChanges\"]);\n    var redirect = useRef(props.redirect);\n    var onSave = useRef(save);\n    // We don't use state here for two reasons:\n    // 1. There no way to execute code only after the state has been updated\n    // 2. We don't want the form to rerender when redirect is changed\n    var setRedirect = function (newRedirect) {\n        redirect.current = newRedirect;\n    };\n    /**\n     * A form can have several Save buttons. In case the user clicks on\n     * a Save button with a custom onSave handler, then on a second Save button\n     * without custom onSave handler, the user expects the default save\n     * handler (the one of the Form) to be called.\n     * That's why the SaveButton onClick calls setOnSave() with no parameters\n     * if it has no custom onSave, and why this function forces a default to\n     * save.\n     */\n    var setOnSave = useCallback(function (newOnSave) {\n        typeof newOnSave === 'function'\n            ? (onSave.current = newOnSave)\n            : (onSave.current = save);\n    }, [save]);\n    var formContextValue = useMemo(function () { return ({ setOnSave: setOnSave }); }, [setOnSave]);\n    var finalInitialValues = getFormInitialValues(initialValues, defaultValue, record);\n    var submit = function (values) {\n        var finalRedirect = typeof redirect.current === undefined\n            ? props.redirect\n            : redirect.current;\n        var finalValues = sanitizeEmptyValues(finalInitialValues, values);\n        onSave.current(finalValues, finalRedirect);\n    };\n    return (React.createElement(FormContext.Provider, { value: formContextValue },\n        React.createElement(Form, { key: version, debug: debug, decorators: decorators, destroyOnUnregister: destroyOnUnregister, form: form, initialValues: finalInitialValues, initialValuesEqual: initialValuesEqual, keepDirtyOnReinitialize: keepDirtyOnReinitialize, mutators: mutators, onSubmit: submit, subscription: subscription, validate: validate, validateOnBlur: validateOnBlur }, function (formProps) { return (React.createElement(FormView, __assign({}, props, formProps, { record: record, setRedirect: setRedirect, saving: formProps.submitting || saving, render: render, save: save, warnWhenUnsavedChanges: warnWhenUnsavedChanges }))); })));\n};\nvar defaultSubscription = {\n    submitting: true,\n    pristine: true,\n    valid: true,\n    invalid: true,\n};\nvar FormView = function (_a) {\n    var render = _a.render, warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges, props = __rest(_a, [\"render\", \"warnWhenUnsavedChanges\"]);\n    // if record changes (after a getOne success or a refresh), the form must be updated\n    useInitializeFormWithRecord(props.record);\n    useWarnWhenUnsavedChanges(warnWhenUnsavedChanges);\n    var redirect = props.redirect, setRedirect = props.setRedirect, handleSubmit = props.handleSubmit;\n    /**\n     * We want to let developers define the redirection target from inside the form,\n     * e.g. in a <SaveButton redirect=\"list\" />.\n     * This callback does two things: handle submit, and change the redirection target.\n     * The actual redirection is done in save(), passed by the main controller.\n     *\n     * If the redirection target doesn't depend on the button clicked, it's a\n     * better option to define it directly on the Form component. In that case,\n     * using handleSubmit() instead of handleSubmitWithRedirect is fine.\n     *\n     * @example\n     *\n     * <Button onClick={() => handleSubmitWithRedirect('edit')}>\n     *     Save and edit\n     * </Button>\n     */\n    var handleSubmitWithRedirect = useCallback(function (redirectTo) {\n        if (redirectTo === void 0) { redirectTo = redirect; }\n        setRedirect(redirectTo);\n        handleSubmit();\n    }, [setRedirect, redirect, handleSubmit]);\n    return render(__assign(__assign({}, props), { handleSubmitWithRedirect: handleSubmitWithRedirect }));\n};\nexport default FormWithRedirect;\n"]},"metadata":{},"sourceType":"module"}