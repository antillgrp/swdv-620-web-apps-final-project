{"ast":null,"code":"import _objectSpread from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport FakeRest from 'fakerest';\nimport CustomersRdxManager from './CustomersRdxManager';\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY } from 'react-admin';\n/* eslint-disable no-console */\n\nfunction log(type, resource, params, response) {\n  if (console.group) {\n    // Better logging in Chrome\n    console.groupCollapsed(type, resource, JSON.stringify(params));\n    console.log(response);\n    console.groupEnd();\n  } else {\n    console.log('FakeRest request ', type, resource, params);\n    console.log('FakeRest response', response);\n  }\n}\n\nexport default (function (data) {\n  var loggingEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  //making sure is empty\n  CustomersRdxManager.StoreCleanup(); //load data into store => no subscribers yet at this point\n\n  CustomersRdxManager.AddCustomerSet(data.customers && Array.isArray(data.customers) ? data.customers : []);\n\n  function getRestServerFromData(data) {\n    var restSrv = new FakeRest.Server();\n    restSrv.init(data);\n    return restSrv;\n  }\n\n  var restServer = null;\n\n  function reloadRestSrvFromRedux() {\n    restServer = getRestServerFromData(CustomersRdxManager.state);\n  } //creating a FakerestServer with data for ReduxStore state\n\n\n  reloadRestSrvFromRedux(); //creates a new server every time rdx state changes\n\n  CustomersRdxManager.subscribe(reloadRestSrvFromRedux);\n\n  function RdxCreateCustomer(record) {\n    CustomersRdxManager.AddNewCustomer(record); //TODO: Debug comment\n\n    console.log(record);\n    console.log(CustomersRdxManager.state);\n  }\n\n  function RdxUpdateCustomer(record) {\n    CustomersRdxManager.UpdateCustomer(record); //TODO: Debug comment\n\n    console.log(CustomersRdxManager.state);\n  }\n\n  function RdxRemoveCustomer(id) {\n    CustomersRdxManager.DeleteCustomer(id); //TODO: Debug comment\n\n    console.log(CustomersRdxManager.state);\n  }\n\n  function getResponse(type, resource, params) {\n    switch (type) {\n      case GET_LIST:\n        {\n          var _params$pagination = params.pagination,\n              page = _params$pagination.page,\n              perPage = _params$pagination.perPage;\n          var _params$sort = params.sort,\n              field = _params$sort.field,\n              order = _params$sort.order;\n          var query = {\n            sort: [field, order],\n            range: [(page - 1) * perPage, page * perPage - 1],\n            filter: params.filter\n          };\n          return {\n            data: restServer.getAll(resource, query),\n            total: restServer.getCount(resource, {\n              filter: params.filter\n            })\n          };\n        }\n\n      case GET_ONE:\n        {\n          return {\n            data: restServer.getOne(resource, params.id, _objectSpread({}, params))\n          };\n        }\n\n      case GET_MANY:\n        {\n          return {\n            data: restServer.getAll(resource, {\n              filter: {\n                id: params.ids\n              }\n            })\n          };\n        }\n\n      case GET_MANY_REFERENCE:\n        {\n          var _params$pagination2 = params.pagination,\n              _page = _params$pagination2.page,\n              _perPage = _params$pagination2.perPage;\n          var _params$sort2 = params.sort,\n              _field = _params$sort2.field,\n              _order = _params$sort2.order;\n          var _query = {\n            sort: [_field, _order],\n            range: [(_page - 1) * _perPage, _page * _perPage - 1],\n            filter: _objectSpread(_objectSpread({}, params.filter), {}, {\n              [params.target]: params.id\n            })\n          };\n          return {\n            data: restServer.getAll(resource, _query),\n            total: restServer.getCount(resource, {\n              filter: _query.filter\n            })\n          };\n        }\n\n      case CREATE:\n        {\n          var result = {\n            data: restServer.addOne(resource, _objectSpread({}, params.data))\n          };\n          RdxCreateCustomer(_objectSpread({}, result.data)); // reload restserver\n\n          return result;\n        }\n\n      case UPDATE:\n        {\n          var _result = {\n            data: restServer.updateOne(resource, params.id, _objectSpread({}, params.data))\n          };\n          RdxUpdateCustomer(_objectSpread({}, _result.data)); // reload restserver\n\n          return _result;\n        }\n\n      case UPDATE_MANY:\n        {\n          var _result2 = {\n            data: params.ids\n          };\n          params.ids.forEach(function (id) {\n            RdxUpdateCustomer(_objectSpread({}, restServer.updateOne(resource, id, _objectSpread({}, params.data))));\n          });\n          return _result2;\n        }\n\n      case DELETE:\n        {\n          var _result3 = {\n            data: restServer.removeOne(resource, params.id)\n          };\n          RdxRemoveCustomer(_result3.data.id); // reload restserver\n\n          return _result3;\n        }\n\n      case DELETE_MANY:\n        {\n          var _result4 = {\n            data: params.ids\n          };\n          params.ids.forEach(function (id) {\n            restServer.removeOne(resource, id);\n            RdxRemoveCustomer(id); // reload restserver\n          });\n          return _result4;\n        }\n\n      default:\n        return false;\n    }\n  }\n  /**\r\n   * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n   * @param {Object} params The data request params, depending on the type\r\n   * @returns {Promise} The response\r\n   */\n\n\n  return function (type, resource, params) {\n    var collection = restServer.getCollection(resource);\n\n    if (!collection) {\n      return new Promise(function (_, reject) {\n        return reject(new Error(\"Undefined collection \\\"\".concat(resource, \"\\\"\")));\n      });\n    }\n\n    var response;\n\n    try {\n      response = getResponse(type, resource, params);\n    } catch (error) {\n      return new Promise(function (_, reject) {\n        return reject(error);\n      });\n    }\n\n    if (response === false) {\n      return new Promise(function (_, reject) {\n        return reject(new Error(\"Unsupported fetch action type \".concat(type)));\n      });\n    }\n\n    if (loggingEnabled) {\n      log(type, resource, params, response);\n    }\n\n    return new Promise(function (resolve) {\n      return resolve(response);\n    });\n  };\n});","map":{"version":3,"sources":["/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/src/Etl/rdxfy-observable-data-fakerest.js"],"names":["FakeRest","CustomersRdxManager","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","log","type","resource","params","response","console","group","groupCollapsed","JSON","stringify","groupEnd","data","loggingEnabled","StoreCleanup","AddCustomerSet","customers","Array","isArray","getRestServerFromData","restSrv","Server","init","restServer","reloadRestSrvFromRedux","state","subscribe","RdxCreateCustomer","record","AddNewCustomer","RdxUpdateCustomer","UpdateCustomer","RdxRemoveCustomer","id","DeleteCustomer","getResponse","pagination","page","perPage","sort","field","order","query","range","filter","getAll","total","getCount","getOne","ids","target","result","addOne","updateOne","forEach","removeOne","collection","getCollection","Promise","_","reject","Error","error","resolve"],"mappings":"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","sourcesContent":["import FakeRest from 'fakerest';\r\n\r\nimport CustomersRdxManager from './CustomersRdxManager'\r\n\r\nimport {\r\n    GET_LIST,\r\n    GET_ONE,\r\n    GET_MANY,\r\n    GET_MANY_REFERENCE,\r\n    CREATE,\r\n    UPDATE,\r\n    UPDATE_MANY,\r\n    DELETE,\r\n    DELETE_MANY,\r\n} from 'react-admin';\r\n\r\n/* eslint-disable no-console */\r\nfunction log(type, resource, params, response) {\r\n    if (console.group) {\r\n        // Better logging in Chrome\r\n        console.groupCollapsed(type, resource, JSON.stringify(params));\r\n        console.log(response);\r\n        console.groupEnd();\r\n    } else {\r\n        console.log('FakeRest request ', type, resource, params);\r\n        console.log('FakeRest response', response);\r\n    }\r\n}\r\n\r\nexport default (data, loggingEnabled = false) => {\r\n\r\n    //making sure is empty\r\n    CustomersRdxManager.StoreCleanup();\r\n\r\n    //load data into store => no subscribers yet at this point\r\n    CustomersRdxManager.AddCustomerSet(\r\n        data.customers && Array.isArray(data.customers) ? data.customers : []\r\n    );\r\n\r\n    function getRestServerFromData(data){\r\n        const restSrv = new FakeRest.Server();\r\n        restSrv.init(data);\r\n        return restSrv;\r\n    }\r\n\r\n    var restServer = null;\r\n\r\n    function reloadRestSrvFromRedux() {\r\n        restServer = getRestServerFromData(CustomersRdxManager.state);\r\n    }\r\n\r\n    //creating a FakerestServer with data for ReduxStore state\r\n    reloadRestSrvFromRedux();\r\n\r\n    //creates a new server every time rdx state changes\r\n    CustomersRdxManager.subscribe(reloadRestSrvFromRedux);\r\n\r\n    function RdxCreateCustomer(record){\r\n        CustomersRdxManager.AddNewCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(record);\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxUpdateCustomer(record){\r\n        CustomersRdxManager.UpdateCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxRemoveCustomer(id){\r\n        CustomersRdxManager.DeleteCustomer(id);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n\r\n    function getResponse(type, resource, params) {\r\n        switch (type) {\r\n            case GET_LIST: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: params.filter,\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: params.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case GET_ONE: {\r\n                return {\r\n                    data: restServer.getOne(resource, params.id, { ...params }),\r\n                };\r\n            }\r\n            case GET_MANY: {\r\n                return {\r\n                    data: restServer.getAll(resource, {\r\n                        filter: { id: params.ids },\r\n                    }),\r\n                };\r\n            }\r\n            case GET_MANY_REFERENCE: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: { ...params.filter, [params.target]: params.id },\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: query.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case CREATE: {\r\n                const result = {\r\n                    data: restServer.addOne(resource, { ...params.data }),\r\n                };\r\n                RdxCreateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE: {\r\n                const result = {\r\n                    data: restServer.updateOne(\r\n                        resource,\r\n                        params.id,\r\n                        { ...params.data, }\r\n                    ),\r\n                };\r\n                RdxUpdateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        RdxUpdateCustomer({// reload restserver\r\n                            ...restServer.updateOne(\r\n                                resource,\r\n                                id,\r\n                                { ...params.data, }\r\n                            )\r\n                        });\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            case DELETE: {\r\n                const result = {\r\n                    data: restServer.removeOne(resource, params.id)\r\n                };\r\n                RdxRemoveCustomer(result.data.id);// reload restserver\r\n                return result;\r\n            }\r\n            case DELETE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        restServer.removeOne(resource, id);\r\n                        RdxRemoveCustomer(id); // reload restserver\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n     * @param {Object} params The data request params, depending on the type\r\n     * @returns {Promise} The response\r\n     */\r\n    return (type, resource, params) => {\r\n        const collection = restServer.getCollection(resource);\r\n        if (!collection) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Undefined collection \"${resource}\"`))\r\n            );\r\n        }\r\n        let response;\r\n        try {\r\n            response = getResponse(type, resource, params);\r\n        } catch (error) {\r\n            return new Promise((_, reject) => reject(error));\r\n        }\r\n        if (response === false) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Unsupported fetch action type ${type}`))\r\n            );\r\n        }\r\n        if (loggingEnabled) {\r\n            log(type, resource, params, response);\r\n        }\r\n        return new Promise(resolve => resolve(response));\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}