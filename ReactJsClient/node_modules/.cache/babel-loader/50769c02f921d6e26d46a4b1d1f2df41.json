{"ast":null,"code":"import _toConsumableArray from\"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{createStore}from'redux';var CustomersRdxManager=/*#__PURE__*/function(){_createClass(CustomersRdxManager,null,[{key:\"initialState\",//SINGLETON\nget:function get(){//action date/time for insert and update\n// eslint-disable-next-line\nvar nowFormatedDate=new Date().toISOString();// eslint-disable-next-line\nnowFormatedDate=nowFormatedDate.split('T')[0]+' '+nowFormatedDate.split('T')[1].split('.')[0];return{//Customers\ncustomers:[//Example\n// {\n//     id:-1,\n//     email: \"noemail@email.com\",\n//     first_name: \"dummy\",\n//     last_name: \"dummy\",\n//     ip: \"127.0.0.1\",\n//     latitude: 0,\n//     longitude: 0,\n//     created_at: nowFormatedDate,\n//     updated_at: nowFormatedDate\n// }\n],//Cart Products\ndeletedCusts:[]/*********ADMINISTRATION(TO BE IMPLEMENTED)*************/ //User logged in\n// userLoggedInId:1,\n// //user list\n// users:[\n//     { id:1, userName:'admin', password:'Passw0rd' },\n// ]\n/*********ADMINISTRATION(TO BE IMPLEMENTED)*************/};}},{key:\"actionTypes\",get:function get(){return Object.freeze({ADD_NEW_CUSTOMER:'ADD_NEW_CUSTOMER',ADD_CUSTOMER_SET:'ADD_CUSTOMER_SET',UPDATE_CUSTOMER:'UPDATE_CUSTOMER',DELETE_CUSTOMER:'DELETE_CUSTOMER',CLEANUP:'CLEANUP'});}},{key:\"customersReducer\",get:function get(){return function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:CustomersRdxManager.initialState;var action=arguments.length>1?arguments[1]:undefined;var customers=state.customers,deletedCusts=state.deletedCusts;//action date/time for insert and update\n// eslint-disable-next-line\nvar nowFormatedDate=new Date().toISOString();// eslint-disable-next-line\nnowFormatedDate=nowFormatedDate.split('T')[0]+' '+nowFormatedDate.split('T')[1].split('.')[0];switch(action.type){case CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER:{//no validation done UI should be consistent\nvar newCustInfo=action.data.newCustInfo;//no id included => generated\n//if store contains newCust already => do nothing ? or update (now => do nothing)(see UPDATE_CUSTOMER)\nif(customers.some(function(c){return c.email===newCustInfo.email;}))return state;return _objectSpread(_objectSpread({},state),{},{//adding the new cust\ncustomers:[].concat(_toConsumableArray(customers),[// new customer\n_objectSpread(_objectSpread({},newCustInfo),{},{//if brings id and id is not in use yet else generate it max+1\nid:newCustInfo.id&&customers.findIndex(function(c){return+c.id===newCustInfo.id;})<0?newCustInfo.id:// calculation generating next id (max + 1)\n+customers.reduce(function(max,next){return+max.id>+next.id?max:next;}).id+1,// now date formating\ncreated_at:nowFormatedDate,updated_at:nowFormatedDate})])});}case CustomersRdxManager.actionTypes.UPDATE_CUSTOMER:{var updCustInfo=action.data.updCustInfo;//id included\nvar updatedIndex=customers.findIndex(function(c){return+c.id===+updCustInfo.id;});if(updatedIndex<0)return state;//do nothing no error\n//make sure at LEAST ONE of the editable field has changed else do nothing\nfor(var key in updCustInfo){if(updCustInfo[key]!==customers[updatedIndex][key])//change found\nreturn _objectSpread(_objectSpread({},state),{},{customers:[].concat(_toConsumableArray(customers.slice(0,updatedIndex)),[_objectSpread(_objectSpread(_objectSpread({},customers[updatedIndex]),updCustInfo),{},{//overwrite what changed\nupdated_at:nowFormatedDate})])});}return state;}case CustomersRdxManager.actionTypes.DELETE_CUSTOMER:{var id=action.data.id;var deleteIndex=customers.findIndex(function(curr){return+curr.id===+id;});if(deleteIndex<0)return state;//do nothing no error\nreturn _objectSpread(_objectSpread({},state),{},{//add it to deletedCusts\ndeletedCusts:[].concat(_toConsumableArray(deletedCusts),[_objectSpread({},customers[deleteIndex])]),//remove it from customers\ncustomers:[].concat(_toConsumableArray(customers.slice(0,deleteIndex)),_toConsumableArray(customers.slice(deleteIndex+1)))});}case CustomersRdxManager.actionTypes.CLEANUP:{return _objectSpread({},CustomersRdxManager.initialState);}case CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET:{/**\r\n                     * AVOID TO COMBINE SETs FROM DIFFERENT DATASOURCES INSIDE THE STORE\r\n                     */var dataSetArr=action.data.dataSetArr;return _objectSpread(_objectSpread({},CustomersRdxManager.initialState),{},{customers:_toConsumableArray(dataSetArr)});}default:return state;}};}},{key:\"ActionAddNewCustomer\",get:function get(){return function(newCustInfo){return{type:CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER,data:{newCustInfo:newCustInfo}};};}},{key:\"ActionUpdateCustomer\",get:function get(){return function(updCustInfo){return{type:CustomersRdxManager.actionTypes.UPDATE_CUSTOMER,data:{updCustInfo:updCustInfo}};};}},{key:\"ActionDeleteCustomer\",get:function get(){return function(id){return{type:CustomersRdxManager.actionTypes.DELETE_CUSTOMER,data:{id:id}};};}},{key:\"ActionStoreCleanup\",get:function get(){return function(){return{type:CustomersRdxManager.actionTypes.CLEANUP,data:{}};};}},{key:\"ActionAddCustomerSet\",get:function get(){return function(dataSetArr){return{type:CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET,data:{dataSetArr:dataSetArr}};};}}]);function CustomersRdxManager(){var _this=this;_classCallCheck(this,CustomersRdxManager);this.reduxStore=createStore(CustomersRdxManager.customersReducer);this.AddNewCustomer=function(newCustInfo){return _this.reduxStore.dispatch(CustomersRdxManager.ActionAddNewCustomer(newCustInfo));};this.UpdateCustomer=function(updCustInfo){return _this.reduxStore.dispatch(CustomersRdxManager.ActionUpdateCustomer(updCustInfo));};this.DeleteCustomer=function(id){return _this.reduxStore.dispatch(CustomersRdxManager.ActionDeleteCustomer(id));};this.StoreCleanup=function(){return _this.reduxStore.dispatch(CustomersRdxManager.ActionStoreCleanup());};this.AddCustomerSet=function(dataSetArr){return _this.reduxStore.dispatch(CustomersRdxManager.ActionAddCustomerSet(dataSetArr));};this.subscribe=function(callback){return _this.reduxStore.subscribe(callback);};Object.freeze(this);//set \"final\" the redux\n}_createClass(CustomersRdxManager,[{key:\"state\",get:function get(){return this.reduxStore.getState();}}]);return CustomersRdxManager;}();//SINGLETON\nvar RdxManager=new CustomersRdxManager();export default RdxManager;","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/src/Etl/CustomersRdxManager.js"],"names":["createStore","CustomersRdxManager","nowFormatedDate","Date","toISOString","split","customers","deletedCusts","Object","freeze","ADD_NEW_CUSTOMER","ADD_CUSTOMER_SET","UPDATE_CUSTOMER","DELETE_CUSTOMER","CLEANUP","state","initialState","action","type","actionTypes","newCustInfo","data","some","c","email","id","findIndex","reduce","max","next","created_at","updated_at","updCustInfo","updatedIndex","key","slice","deleteIndex","curr","dataSetArr","reduxStore","customersReducer","AddNewCustomer","dispatch","ActionAddNewCustomer","UpdateCustomer","ActionUpdateCustomer","DeleteCustomer","ActionDeleteCustomer","StoreCleanup","ActionStoreCleanup","AddCustomerSet","ActionAddCustomerSet","subscribe","callback","getState","RdxManager"],"mappings":"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","sourcesContent":["import { createStore } from 'redux';\r\n\r\nclass CustomersRdxManager{ //SINGLETON\r\n\r\n    static get initialState() {\r\n        //action date/time for insert and update\r\n        // eslint-disable-next-line\r\n        let nowFormatedDate = new Date().toISOString();\r\n        // eslint-disable-next-line\r\n        nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n        return {\r\n            //Customers\r\n            customers: [\r\n                //Example\r\n                // {\r\n                //     id:-1,\r\n                //     email: \"noemail@email.com\",\r\n                //     first_name: \"dummy\",\r\n                //     last_name: \"dummy\",\r\n                //     ip: \"127.0.0.1\",\r\n                //     latitude: 0,\r\n                //     longitude: 0,\r\n                //     created_at: nowFormatedDate,\r\n                //     updated_at: nowFormatedDate\r\n                // }\r\n            ],\r\n            //Cart Products\r\n            deletedCusts:[],\r\n\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n            //User logged in\r\n            // userLoggedInId:1,\r\n            // //user list\r\n            // users:[\r\n            //     { id:1, userName:'admin', password:'Passw0rd' },\r\n            // ]\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n        };\r\n    }\r\n    static get actionTypes() {\r\n        return Object.freeze({\r\n            ADD_NEW_CUSTOMER:'ADD_NEW_CUSTOMER',\r\n            ADD_CUSTOMER_SET:'ADD_CUSTOMER_SET',\r\n            UPDATE_CUSTOMER:'UPDATE_CUSTOMER',\r\n            DELETE_CUSTOMER:'DELETE_CUSTOMER',\r\n            CLEANUP:'CLEANUP',\r\n        });\r\n    }\r\n    static get customersReducer() {\r\n        return (\r\n            state=CustomersRdxManager.initialState,\r\n            action\r\n        ) => {\r\n            const { customers, deletedCusts } = state;\r\n\r\n            //action date/time for insert and update\r\n            // eslint-disable-next-line\r\n            let nowFormatedDate = new Date().toISOString();\r\n            // eslint-disable-next-line\r\n            nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n            switch (action.type) {\r\n                case CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER: {\r\n                    //no validation done UI should be consistent\r\n                    const {newCustInfo} = action.data; //no id included => generated\r\n\r\n                    //if store contains newCust already => do nothing ? or update (now => do nothing)(see UPDATE_CUSTOMER)\r\n                    if(customers.some(c => c.email === newCustInfo.email)) return state;\r\n\r\n                    return { //new state with the new cust\r\n                        ...state,\r\n                        //adding the new cust\r\n                        customers: [\r\n                            ...customers,\r\n                            // new customer\r\n                            {\r\n                                ...newCustInfo,\r\n                                //if brings id and id is not in use yet else generate it max+1\r\n                                id: newCustInfo.id\r\n                                    &&\r\n                                    customers.findIndex(c => +c.id === newCustInfo.id) < 0\r\n                                    ?\r\n                                        newCustInfo.id\r\n                                    :\r\n                                        // calculation generating next id (max + 1)\r\n                                        +customers.reduce(\r\n                                            (max,next) => (+max.id > +next.id) ? max : next\r\n                                        ).id + 1,\r\n                                // now date formating\r\n                                created_at: nowFormatedDate,\r\n                                updated_at: nowFormatedDate\r\n                            }\r\n                        ]\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.UPDATE_CUSTOMER: {\r\n\r\n                    const {updCustInfo} = action.data; //id included\r\n\r\n                    const updatedIndex = customers.findIndex(c => +c.id === +updCustInfo.id);\r\n                    if(updatedIndex < 0) return state; //do nothing no error\r\n\r\n                    //make sure at LEAST ONE of the editable field has changed else do nothing\r\n                    for(let key in updCustInfo) {\r\n                        if(updCustInfo[key] !== customers[updatedIndex][key]) //change found\r\n                        return {\r\n                            ...state,\r\n                            customers: [\r\n                                ...customers.slice(0,updatedIndex),\r\n                                { //updated cust\r\n                                    ...customers[updatedIndex],\r\n                                    ...updCustInfo, //overwrite what changed\r\n                                    updated_at: nowFormatedDate\r\n                                },\r\n                            ]\r\n                        };\r\n                    }\r\n                    return state;\r\n                }\r\n                case CustomersRdxManager.actionTypes.DELETE_CUSTOMER: {\r\n\r\n                    const {id} = action.data;\r\n\r\n                    const deleteIndex = customers.findIndex(curr => +curr.id === +id);\r\n                    if(deleteIndex < 0) return state; //do nothing no error\r\n\r\n                    return {\r\n                        ...state,\r\n                        //add it to deletedCusts\r\n                        deletedCusts:[\r\n                            ...deletedCusts,\r\n                            { ...customers[deleteIndex] }\r\n                        ],\r\n                        //remove it from customers\r\n                        customers:[\r\n                            ...customers.slice(0,deleteIndex),\r\n                            ...customers.slice(deleteIndex + 1)\r\n                        ],\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.CLEANUP: {\r\n                    return { ...CustomersRdxManager.initialState };\r\n                }\r\n                case CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET: {\r\n                    /**\r\n                     * AVOID TO COMBINE SETs FROM DIFFERENT DATASOURCES INSIDE THE STORE\r\n                     */\r\n\r\n                    const {dataSetArr} = action.data;\r\n\r\n                    return {\r\n                        //cleanup first\r\n                        ...CustomersRdxManager.initialState,\r\n                        customers: [\r\n                            //...CustomersRdxManager.initialState.customers, //should be empty\r\n                            ...dataSetArr\r\n                        ]\r\n                    };\r\n                }\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    }\r\n    static get ActionAddNewCustomer(){\r\n        return (newCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER,\r\n            data:{newCustInfo:newCustInfo},\r\n        });\r\n    }\r\n    static get ActionUpdateCustomer(){\r\n        return (updCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.UPDATE_CUSTOMER,\r\n            data:{ updCustInfo:updCustInfo },\r\n        });\r\n    }\r\n    static get ActionDeleteCustomer(){\r\n        return (id) => ({\r\n            type:CustomersRdxManager.actionTypes.DELETE_CUSTOMER,\r\n            data:{ id:id },\r\n        });\r\n    }\r\n    static get ActionStoreCleanup(){\r\n        return () => ({\r\n            type:CustomersRdxManager.actionTypes.CLEANUP,\r\n            data:{},\r\n        });\r\n    }\r\n    static get ActionAddCustomerSet(){\r\n        return (dataSetArr) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET,\r\n            data:{dataSetArr:dataSetArr},\r\n        });\r\n    }\r\n\r\n    constructor (){\r\n        this.reduxStore = createStore(CustomersRdxManager.customersReducer);\r\n\r\n        this.AddNewCustomer = (newCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddNewCustomer(newCustInfo)\r\n        );\r\n\r\n        this.UpdateCustomer = (updCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionUpdateCustomer(updCustInfo)\r\n        );\r\n\r\n        this.DeleteCustomer = (id) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionDeleteCustomer(id)\r\n        );\r\n\r\n        this.StoreCleanup = () => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionStoreCleanup()\r\n        );\r\n\r\n        this.AddCustomerSet = (dataSetArr) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddCustomerSet(dataSetArr)\r\n        );\r\n\r\n        this.subscribe = (callback) => this.reduxStore.subscribe(callback);\r\n\r\n        Object.freeze(this); //set \"final\" the redux\r\n    }\r\n\r\n    get state () {\r\n        return this.reduxStore.getState();\r\n    }\r\n}\r\n\r\n//SINGLETON\r\nconst RdxManager = new CustomersRdxManager();\r\nexport default RdxManager;"]},"metadata":{},"sourceType":"module"}