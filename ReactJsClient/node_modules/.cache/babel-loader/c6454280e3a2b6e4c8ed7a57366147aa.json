{"ast":null,"code":"import _objectSpread from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/src/Etl/Dataloader.js\";\nimport React, { Component } from 'react';\nimport ReactFileReader from 'react-file-reader';\nimport CustomersRdxManager from './CustomersRdxManager';\n\nvar Dataloader = /*#__PURE__*/function (_Component) {\n  _inherits(Dataloader, _Component);\n\n  var _super = _createSuper(Dataloader);\n\n  function Dataloader(props) {\n    var _this;\n\n    _classCallCheck(this, Dataloader);\n\n    _this = _super.call(this, props);\n\n    _this.onLoadClick = function (e) {\n      e.preventDefault(); //TODO: comment\n      //console.log(this.state);\n\n      switch (+_this.state.dataSource) {\n        case 1:\n          {\n            //JSON FILE\n            if (!_this.state.jsonDataFile) alert(\"Json data file not properly selected, pls try again.\");else _this.loadJsonFile();\n            break;\n          }\n\n        case 2:\n          {\n            //CSV FILES\n            if (!_this.state.csvDataFile || !_this.state.csvMapFile) alert(\"CSV Data or Map not properly selected, pls try again.\");else _this.loadCSVFiles();\n            break;\n          }\n\n        case 3:\n          {\n            //FETCH FROM DB/AP\n            _this.fetchFromAPI();\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.refillCustRdxStore = function (dataSetArr) {\n      CustomersRdxManager.AddCustomerSet(dataSetArr); //TODO: redirect/navegate to /customers\n\n      _this.props.history && _this.props.history.push('/customers'); //TODO: Debug: Comment\n\n      console.log(CustomersRdxManager.state);\n    };\n\n    _this.loadJsonFile = function () {\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log('JsonFile reading was aborted');\n      };\n\n      reader.onerror = function () {\n        return console.log('JsonFile reading has failed');\n      };\n\n      reader.onload = function () {\n        var dataSetArr = JSON.parse(reader.result);\n        dataSetArr = Array.isArray(dataSetArr) ? Array.from(dataSetArr) : []; //TODO: comment\n\n        console.log(\" from JSON:\");\n        console.log(dataSetArr);\n\n        _this.refillCustRdxStore(dataSetArr);\n      };\n\n      reader.readAsBinaryString(_this.state.jsonDataFile);\n    };\n\n    _this.loadCSVFiles = function () {\n      var csvParser = require('csvtojson');\n\n      var reader = new FileReader();\n\n      reader.onabort = function () {\n        return console.log('CsvFile reading was aborted');\n      };\n\n      reader.onerror = function () {\n        return console.log('CsvFile reading has failed');\n      };\n\n      reader.onload = function () {\n        csvParser().fromString(reader.result).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              Mapper = _ref2[0];\n\n          reader.onload = function () {\n            csvParser().fromString(reader.result).then(function (dataSetArr) {\n              dataSetArr = dataSetArr.map(function (entry, i) {\n                var resultObj = {\n                  id: i + 1,\n                  updated_at: null\n                };\n\n                for (var key in Mapper) {\n                  resultObj[key] = entry[Mapper[key]];\n                }\n\n                return resultObj;\n              }); //TODO: comment\n\n              console.log(\"from CSV:\");\n              console.log(dataSetArr);\n\n              _this.refillCustRdxStore(dataSetArr);\n            });\n          };\n\n          reader.readAsBinaryString(_this.state.csvDataFile);\n        });\n      };\n\n      reader.readAsBinaryString(_this.state.csvMapFile);\n    };\n\n    _this.fetchFromAPI = function () {\n      fetch(\"http://localhost:8080/customers\").then(function (response) {\n        if (response.ok) return response.json();else {\n          alert(\"ERROR Fetching from:http://localhost:8080/customers\");\n          return [];\n        }\n      }).then(function (json) {\n        return _this.refillCustRdxStore(json);\n      }).catch(function (error) {\n        console.error(error);\n      });\n    };\n\n    _this.state = {\n      //remounting:true,\n      dataSource: 0,\n      // 0: empty, 1:json, 2:csv, 3: database/api\n      jsonDataFile: null,\n      csvDataFile: null,\n      csvMapFile: null\n    }; //ReduxEngine.reduxStore.subscribe(() => { ???\n    //    this.setState({remounting:true});\n    //});\n\n    return _this;\n  }\n\n  _createClass(Dataloader, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fontStyle = function fontStyle(f, v) {\n        return {\n          fontSize: \"calc(\".concat(f, \"px + \").concat(v, \"vmin)\")\n        };\n      };\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"fieldset\", {\n        style: {\n          border: '2px solid black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        style: _objectSpread({\n          border: '2px solid black',\n          padding: '0 2vmin 0 2vmin'\n        }, fontStyle(14, 5)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }\n      }, \"Data loader\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 33\n        }\n      }, \"Select the source of the data:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"select\", {\n        value: this.state.dataSource,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            dataSource: e.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 33\n        }\n      }, ['', 'json file', 'csv map/data files', 'database'].map(function (dataSource, index) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 45\n          }\n        }, dataSource);\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }\n      }), +this.state.dataSource === 1 ? /*#__PURE__*/React.createElement(ReactFileReader //https://www.npmjs.com/package/react-file-reader\n      , {\n        fileTypes: [\".json\"],\n        handleFiles: function handleFiles(files) {\n          //TODO: validate?: file[0].type === \"application/json\"\n          _this2.setState({\n            jsonDataFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 45\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 56\n        }\n      }, \"JSON\"), \" file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 45\n        }\n      }, this.state.jsonDataFile && this.state.jsonDataFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 45\n        }\n      }, \"Open\"))) : +this.state.dataSource === 2 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactFileReader, {\n        fileTypes: [\".csv\"],\n        handleFiles: function handleFiles(files) {\n          _this2.setState({\n            csvDataFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 49\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 60\n        }\n      }, \"CSV\"), \" \", \"( \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 55\n        }\n      }, \"Data\"), \" ) file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 49\n        }\n      }, this.state.csvDataFile && this.state.csvDataFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 49\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 49\n        }\n      }, \"Open Data File\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(ReactFileReader, {\n        fileTypes: [\".csv\"],\n        handleFiles: function handleFiles(files) {\n          _this2.setState({\n            csvMapFile: files.length > 0 ? files[0] : null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 49\n        }\n      }, \"Select \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 60\n        }\n      }, \"CSV\"), \" \", \"( \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 55\n        }\n      }, \"Map\"), \" ) file:\", \" \"), /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 49\n        }\n      }, this.state.csvMapFile && this.state.csvMapFile.name), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 49\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 49\n        }\n      }, \"Open Map File\")))) : +this.state.dataSource === 3 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 41\n        }\n      }, \"Load data from API (URL):\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 50\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        href: \"http://localhost:8080/customers\",\n        style: {\n          color: \"orange\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 49\n        }\n      }, \"http://localhost:8080/customers\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 45\n        }\n      }))) : null, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Load...\",\n        onClick: this.onLoadClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }]);\n\n  return Dataloader;\n}(Component);\n\nexport { Dataloader as default };","map":{"version":3,"sources":["/home/vsonline/workspace/people10challenge-alpha/code-challenge/challenge-client-server-app/client/src/Etl/Dataloader.js"],"names":["React","Component","ReactFileReader","CustomersRdxManager","Dataloader","props","onLoadClick","e","preventDefault","state","dataSource","jsonDataFile","alert","loadJsonFile","csvDataFile","csvMapFile","loadCSVFiles","fetchFromAPI","refillCustRdxStore","dataSetArr","AddCustomerSet","history","push","console","log","reader","FileReader","onabort","onerror","onload","JSON","parse","result","Array","isArray","from","readAsBinaryString","csvParser","require","fromString","then","Mapper","map","entry","i","resultObj","id","updated_at","key","fetch","response","ok","json","catch","error","fontStyle","f","v","fontSize","border","padding","setState","target","value","index","files","length","color","name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;;IAEqBC,U;;;;;AAEjB,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;;AADc,UAgKlBC,WAhKkB,GAgKJ,UAAAC,CAAC,EAAI;AACfA,MAAAA,CAAC,CAACC,cAAF,GADe,CAGf;AACA;;AAEA,cAAQ,CAAC,MAAKC,KAAL,CAAWC,UAApB;AACI,aAAK,CAAL;AAAO;AAAE;AACL,gBAAG,CAAC,MAAKD,KAAL,CAAWE,YAAf,EACIC,KAAK,CAAC,sDAAD,CAAL,CADJ,KAGI,MAAKC,YAAL;AACJ;AACH;;AACD,aAAK,CAAL;AAAO;AAAE;AACL,gBAAG,CAAC,MAAKJ,KAAL,CAAWK,WAAZ,IAA2B,CAAC,MAAKL,KAAL,CAAWM,UAA1C,EACIH,KAAK,CAAC,uDAAD,CAAL,CADJ,KAGI,MAAKI,YAAL;AACJ;AACH;;AACD,aAAK,CAAL;AAAO;AAAE;AACL,kBAAKC,YAAL;;AACA;AACH;;AACD;AACI;AApBR;AAsBH,KA5LiB;;AAAA,UA8LlBC,kBA9LkB,GA8LG,UAACC,UAAD,EAAgB;AAEjChB,MAAAA,mBAAmB,CAACiB,cAApB,CAAmCD,UAAnC,EAFiC,CAIjC;;AACA,YAAKd,KAAL,CAAWgB,OAAX,IAAsB,MAAKhB,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB,CAAtB,CALiC,CAOjC;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYrB,mBAAmB,CAACM,KAAhC;AACH,KAvMiB;;AAAA,UAyMlBI,YAzMkB,GAyMH,YAAM;AACjB,UAAMY,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB;AAAA,eAAMJ,OAAO,CAACC,GAAR,CAAY,8BAAZ,CAAN;AAAA,OAAjB;;AACAC,MAAAA,MAAM,CAACG,OAAP,GAAiB;AAAA,eAAML,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAAN;AAAA,OAAjB;;AACAC,MAAAA,MAAM,CAACI,MAAP,GAAgB,YAAM;AAClB,YAAIV,UAAU,GAAGW,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,MAAlB,CAAjB;AACAb,QAAAA,UAAU,GAAGc,KAAK,CAACC,OAAN,CAAcf,UAAd,IAA4Bc,KAAK,CAACE,IAAN,CAAWhB,UAAX,CAA5B,GAAqD,EAAlE,CAFkB,CAIlB;;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;;AAEA,cAAKD,kBAAL,CAAwBC,UAAxB;AACH,OATD;;AAUAM,MAAAA,MAAM,CAACW,kBAAP,CAA0B,MAAK3B,KAAL,CAAWE,YAArC;AACH,KAzNiB;;AAAA,UA2NlBK,YA3NkB,GA2NH,YAAM;AACjB,UAAMqB,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,UAAMb,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB;AAAA,eAAMJ,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAAN;AAAA,OAAjB;;AACAC,MAAAA,MAAM,CAACG,OAAP,GAAiB;AAAA,eAAML,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAAN;AAAA,OAAjB;;AACAC,MAAAA,MAAM,CAACI,MAAP,GAAgB,YAAM;AAClBQ,QAAAA,SAAS,GAAGE,UAAZ,CAAuBd,MAAM,CAACO,MAA9B,EACCQ,IADD,CAEI,gBAAc;AAAA;AAAA,cAAZC,MAAY;;AACVhB,UAAAA,MAAM,CAACI,MAAP,GAAgB,YAAM;AAClBQ,YAAAA,SAAS,GAAGE,UAAZ,CAAuBd,MAAM,CAACO,MAA9B,EACCQ,IADD,CAEI,UAAArB,UAAU,EAAI;AACVA,cAAAA,UAAU,GAAGA,UAAU,CACtBuB,GADY,CACR,UAACC,KAAD,EAAOC,CAAP,EAAa;AACd,oBAAMC,SAAS,GAAG;AAAEC,kBAAAA,EAAE,EAACF,CAAC,GAAC,CAAP;AAAUG,kBAAAA,UAAU,EAAC;AAArB,iBAAlB;;AACA,qBAAI,IAAIC,GAAR,IAAeP,MAAf;AAAuBI,kBAAAA,SAAS,CAACG,GAAD,CAAT,GAAiBL,KAAK,CAACF,MAAM,CAACO,GAAD,CAAP,CAAtB;AAAvB;;AACA,uBAAOH,SAAP;AACH,eALY,CAAb,CADU,CAQV;;AACAtB,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;;AAEA,oBAAKD,kBAAL,CAAwBC,UAAxB;AACH,aAfL;AAiBH,WAlBD;;AAmBAM,UAAAA,MAAM,CAACW,kBAAP,CAA0B,MAAK3B,KAAL,CAAWK,WAArC;AACH,SAvBL;AAyBH,OA1BD;;AA2BAW,MAAAA,MAAM,CAACW,kBAAP,CAA0B,MAAK3B,KAAL,CAAWM,UAArC;AACH,KA9PiB;;AAAA,UAgQlBE,YAhQkB,GAgQH,YAAM;AACjBgC,MAAAA,KAAK,CAAC,iCAAD,CAAL,CACCT,IADD,CACQ,UAAAU,QAAQ,EAAI;AAChB,YAAGA,QAAQ,CAACC,EAAZ,EACI,OAAOD,QAAQ,CAACE,IAAT,EAAP,CADJ,KAEK;AACDxC,UAAAA,KAAK,CAAC,qDAAD,CAAL;AACA,iBAAO,EAAP;AACH;AACJ,OARD,EASC4B,IATD,CASM,UAAAY,IAAI;AAAA,eAAI,MAAKlC,kBAAL,CAAwBkC,IAAxB,CAAJ;AAAA,OATV,EAUCC,KAVD,CAUO,UAAAC,KAAK,EAAI;AACZ/B,QAAAA,OAAO,CAAC+B,KAAR,CAAcA,KAAd;AACH,OAZD;AAaH,KA9QiB;;AAEd,UAAK7C,KAAL,GAAW;AACP;AACAC,MAAAA,UAAU,EAAE,CAFL;AAEQ;AACfC,MAAAA,YAAY,EAAE,IAHP;AAIPG,MAAAA,WAAW,EAAE,IAJN;AAKPC,MAAAA,UAAU,EAAC;AALJ,KAAX,CAFc,CASd;AACA;AACA;;AAXc;AAYjB;;;;6BAEQ;AAAA;;AACL,UAAMwC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAGC,CAAH;AAAA,eAAU;AAACC,UAAAA,QAAQ,iBAASF,CAAT,kBAAkBC,CAAlB;AAAT,SAAV;AAAA,OAAlB;;AAEA,0BACI,uDACI;AAAU,QAAA,KAAK,EAAE;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,KAAK;AACDA,UAAAA,MAAM,EAAE,iBADP;AAEDC,UAAAA,OAAO,EAAE;AAFR,WAGEL,SAAS,CAAC,EAAD,EAAI,CAAJ,CAHX,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAUI,uDACI;AACI,QAAA,QAAQ,EAAG,kBAAAhD,CAAC;AAAA,iBAAIA,CAAC,CAACC,cAAF,EAAJ;AAAA,SADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII;AACI,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,UADtB;AAEI,QAAA,QAAQ,EAAE,kBAAAH,CAAC;AAAA,iBAAI,MAAI,CAACsD,QAAL,CAAc;AAACnD,YAAAA,UAAU,EAACH,CAAC,CAACuD,MAAF,CAASC;AAArB,WAAd,CAAJ;AAAA,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKQ,CAAC,EAAD,EAAK,WAAL,EAAkB,oBAAlB,EAAuC,UAAvC,EACCrB,GADD,CACK,UAAChC,UAAD,EAAYsD,KAAZ;AAAA,4BACD;AAAQ,UAAA,KAAK,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKtD,UADL,CADC;AAAA,OADL,CALR,CAJJ,CAHJ,eAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBJ,eAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBJ,EAwBS,CAAC,KAAKD,KAAL,CAAWC,UAAZ,KAA2B,CAA5B,gBAEI,oBAAC,eAAD,CAAiB;AAAjB;AACI,QAAA,SAAS,EAAE,CAAC,OAAD,CADf;AAEI,QAAA,WAAW,EACP,qBAAAuD,KAAK,EAAI;AACL;AACA,UAAA,MAAI,CAACJ,QAAL,CAAc;AACVlD,YAAAA,YAAY,EAAEsD,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAAC,CAAD,CAAxB,GAA8B;AADlC,WAAd;AAGH,SART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,YAC4D,GAD5D,CADJ,eAII;AAAQ,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAC;AAAP,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK1D,KAAL,CAAWE,YAAX,IAA2B,KAAKF,KAAL,CAAWE,YAAX,CAAwByD,IADxD,CAJJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,CAXJ,CAFJ,GAyBC,CAAC,KAAK3D,KAAL,CAAWC,UAAZ,KAA2B,CAA5B,gBAEI,uDACI,oBAAC,eAAD;AACI,QAAA,SAAS,EAAE,CAAC,MAAD,CADf;AAEI,QAAA,WAAW,EACP,qBAAAuD,KAAK,EAAI;AACL,UAAA,MAAI,CAACJ,QAAL,CAAc;AACV/C,YAAAA,WAAW,EAAEmD,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAAC,CAAD,CAAxB,GAA8B;AADjC,WAAd;AAGH,SAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADX,EACqD,GADrD,qBAEM;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFN,cAEsD,GAFtD,CADJ,eAKI;AAAQ,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAC;AAAP,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK1D,KAAL,CAAWK,WAAX,IAA0B,KAAKL,KAAL,CAAWK,WAAX,CAAuBsD,IADtD,CALJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BATJ,CAVJ,CADJ,eAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBJ,eAwBI,oBAAC,eAAD;AACI,QAAA,SAAS,EAAE,CAAC,MAAD,CADf;AAEI,QAAA,WAAW,EACP,qBAAAH,KAAK,EAAI;AACL,UAAA,MAAI,CAACJ,QAAL,CAAc;AACV9C,YAAAA,UAAU,EAAEkD,KAAK,CAACC,MAAN,GAAe,CAAf,GAAmBD,KAAK,CAAC,CAAD,CAAxB,GAA8B;AADhC,WAAd;AAGH,SAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADX,EACqD,GADrD,qBAEM;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAC;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFN,cAEqD,GAFrD,CADJ,eAKI;AAAQ,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAC;AAAP,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK1D,KAAL,CAAWM,UAAX,IAAyB,KAAKN,KAAL,CAAWM,UAAX,CAAsBqD,IADpD,CALJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBATJ,CAVJ,CAxBJ,CAFJ,GAkDC,CAAC,KAAK3D,KAAL,CAAWC,UAAZ,KAA2B,CAA5B,gBAEI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFT,eAGQ;AACI,QAAA,IAAI,EAAE,iCADV;AAEI,QAAA,KAAK,EAAE;AAACyD,UAAAA,KAAK,EAAC;AAAP,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAHR,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CADJ,CAFJ,GAgBI,IAnHZ,eAqHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArHJ,eAsHI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,OAAO,EAAG,KAAK7D,WAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtHJ,CADJ,CAVJ,CADJ,CADJ;AA6IH;;;;EAhKmCL,S;;SAAnBG,U","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ReactFileReader from 'react-file-reader';\r\n\r\nimport CustomersRdxManager from './CustomersRdxManager';\r\n\r\nexport default class Dataloader extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            //remounting:true,\r\n            dataSource: 0, // 0: empty, 1:json, 2:csv, 3: database/api\r\n            jsonDataFile: null,\r\n            csvDataFile: null,\r\n            csvMapFile:null,\r\n        };\r\n        //ReduxEngine.reduxStore.subscribe(() => { ???\r\n        //    this.setState({remounting:true});\r\n        //});\r\n    }\r\n\r\n    render() {\r\n        const fontStyle = (f,v) => ({fontSize:`calc(${f}px + ${v}vmin)`});\r\n\r\n        return (\r\n            <>\r\n                <fieldset style={{border: '2px solid black'}}>\r\n                    <legend\r\n                        style={{\r\n                            border: '2px solid black',\r\n                            padding: '0 2vmin 0 2vmin',\r\n                            ...fontStyle(14,5)\r\n                        }}\r\n                    >\r\n                        Data loader\r\n                    </legend>\r\n                    <>\r\n                        <form\r\n                            onSubmit={ e => e.preventDefault() }\r\n                        >\r\n                            <label>\r\n                                <br/>\r\n                                <strong>Select the source of the data:</strong>\r\n                                <br/>\r\n                                <select\r\n                                    value={this.state.dataSource}\r\n                                    onChange={e => this.setState({dataSource:e.target.value})}\r\n                                >\r\n                                    {\r\n                                        ['', 'json file', 'csv map/data files','database']\r\n                                        .map((dataSource,index) =>\r\n                                            <option value={index} >\r\n                                                {dataSource}\r\n                                            </option>\r\n                                        )\r\n                                    }\r\n                                </select>\r\n                            </label>\r\n                            <br/>\r\n                            <br/>\r\n                            {\r\n                                (+this.state.dataSource === 1)\r\n                                ?\r\n                                    <ReactFileReader //https://www.npmjs.com/package/react-file-reader\r\n                                        fileTypes={[\".json\"]}\r\n                                        handleFiles = {\r\n                                            files => {\r\n                                                //TODO: validate?: file[0].type === \"application/json\"\r\n                                                this.setState({\r\n                                                    jsonDataFile: files.length > 0 ? files[0] : null\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    >\r\n                                        <label>\r\n                                            <strong>\r\n                                                Select <span style={{color:\"orange\"}}>JSON</span> file:{\" \"}\r\n                                            </strong>\r\n                                            <strong style={{color:\"green\"}}>\r\n                                                {this.state.jsonDataFile && this.state.jsonDataFile.name}\r\n                                            </strong>\r\n                                            <br/>\r\n                                            <button>Open</button>\r\n                                        </label>\r\n                                    </ReactFileReader>\r\n                                :\r\n                                (+this.state.dataSource === 2)\r\n                                ?\r\n                                    <>\r\n                                        <ReactFileReader\r\n                                            fileTypes={[\".csv\"]}\r\n                                            handleFiles = {\r\n                                                files => {\r\n                                                    this.setState({\r\n                                                        csvDataFile: files.length > 0 ? files[0] : null\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            <label>\r\n                                                <strong>\r\n                                                    Select <span style={{color:\"orange\"}}>CSV</span>{\" \"}\r\n                                                    ( <span style={{color:\"red\"}}>Data</span> ) file:{\" \"}\r\n                                                </strong>\r\n                                                <strong style={{color:\"green\"}}>\r\n                                                    {this.state.csvDataFile && this.state.csvDataFile.name}\r\n                                                </strong>\r\n                                                <br/>\r\n                                                <button>Open Data File</button>\r\n                                            </label>\r\n                                        </ReactFileReader>\r\n                                        <br/>\r\n                                        <ReactFileReader\r\n                                            fileTypes={[\".csv\"]}\r\n                                            handleFiles = {\r\n                                                files => {\r\n                                                    this.setState({\r\n                                                        csvMapFile: files.length > 0 ? files[0] : null\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        >\r\n                                            <label>\r\n                                                <strong>\r\n                                                    Select <span style={{color:\"orange\"}}>CSV</span>{\" \"}\r\n                                                    ( <span style={{color:\"red\"}}>Map</span> ) file:{\" \"}\r\n                                                </strong>\r\n                                                <strong style={{color:\"green\"}}>\r\n                                                    {this.state.csvMapFile && this.state.csvMapFile.name}\r\n                                                </strong>\r\n                                                <br/>\r\n                                                <button>Open Map File</button>\r\n                                            </label>\r\n                                        </ReactFileReader>\r\n                                    </>\r\n                                :\r\n                                (+this.state.dataSource === 3)\r\n                                ?\r\n                                    <>\r\n                                        <strong>\r\n                                            Load data from API (URL):\r\n                                            <br/><br/>\r\n                                                <a \r\n                                                    href={\"http://localhost:8080/customers\"}\r\n                                                    style={{color:\"orange\"}}\r\n                                                >\r\n                                                    http://localhost:8080/customers\r\n                                                </a>\r\n                                            <br/>\r\n                                        </strong>\r\n                                    </>\r\n                                :\r\n                                    null\r\n                            }\r\n                            <br/>\r\n                            <input\r\n                                type=\"submit\"\r\n                                value=\"Load...\"\r\n                                onClick={ this.onLoadClick }\r\n                            />\r\n                        </form>\r\n                    </>\r\n                </fieldset>\r\n            </>\r\n        );\r\n    }\r\n\r\n    onLoadClick = e => {\r\n        e.preventDefault();\r\n\r\n        //TODO: comment\r\n        //console.log(this.state);\r\n\r\n        switch (+this.state.dataSource) {\r\n            case 1:{ //JSON FILE\r\n                if(!this.state.jsonDataFile)\r\n                    alert(\"Json data file not properly selected, pls try again.\");\r\n                else\r\n                    this.loadJsonFile();\r\n                break;\r\n            }\r\n            case 2:{ //CSV FILES\r\n                if(!this.state.csvDataFile || !this.state.csvMapFile)\r\n                    alert(\"CSV Data or Map not properly selected, pls try again.\");\r\n                else\r\n                    this.loadCSVFiles();\r\n                break;\r\n            }\r\n            case 3:{ //FETCH FROM DB/AP\r\n                this.fetchFromAPI();\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    refillCustRdxStore = (dataSetArr) => {\r\n\r\n        CustomersRdxManager.AddCustomerSet(dataSetArr);\r\n\r\n        //TODO: redirect/navegate to /customers\r\n        this.props.history && this.props.history.push('/customers');\r\n\r\n        //TODO: Debug: Comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n\r\n    loadJsonFile = () => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log('JsonFile reading was aborted');\r\n        reader.onerror = () => console.log('JsonFile reading has failed');\r\n        reader.onload = () => {\r\n            let dataSetArr = JSON.parse(reader.result);\r\n            dataSetArr = Array.isArray(dataSetArr) ? Array.from(dataSetArr) : [];\r\n\r\n            //TODO: comment\r\n            console.log(\" from JSON:\");\r\n            console.log(dataSetArr);\r\n\r\n            this.refillCustRdxStore(dataSetArr);\r\n        };\r\n        reader.readAsBinaryString(this.state.jsonDataFile);\r\n    }\r\n\r\n    loadCSVFiles = () => {\r\n        const csvParser = require('csvtojson');\r\n\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log('CsvFile reading was aborted');\r\n        reader.onerror = () => console.log('CsvFile reading has failed');\r\n        reader.onload = () => {\r\n            csvParser().fromString(reader.result)\r\n            .then(\r\n                ([Mapper]) => {\r\n                    reader.onload = () => {\r\n                        csvParser().fromString(reader.result)\r\n                        .then(\r\n                            dataSetArr => {\r\n                                dataSetArr = dataSetArr\r\n                                .map((entry,i) => {\r\n                                    const resultObj = { id:i+1, updated_at:null };\r\n                                    for(let key in Mapper) resultObj[key] = entry[Mapper[key]];\r\n                                    return resultObj;\r\n                                });\r\n\r\n                                //TODO: comment\r\n                                console.log(\"from CSV:\");\r\n                                console.log(dataSetArr);\r\n\r\n                                this.refillCustRdxStore(dataSetArr);\r\n                            }\r\n                        );\r\n                    }\r\n                    reader.readAsBinaryString(this.state.csvDataFile);\r\n                }\r\n            );\r\n        };\r\n        reader.readAsBinaryString(this.state.csvMapFile);\r\n    }\r\n\r\n    fetchFromAPI = () => {\r\n        fetch(\"http://localhost:8080/customers\")\r\n        .then(  response => {\r\n            if(response.ok)\r\n                return response.json();\r\n            else {\r\n                alert(\"ERROR Fetching from:http://localhost:8080/customers\");\r\n                return [];\r\n            }\r\n        })\r\n        .then(json => this.refillCustRdxStore(json))\r\n        .catch(error => {\r\n            console.error(error);\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}