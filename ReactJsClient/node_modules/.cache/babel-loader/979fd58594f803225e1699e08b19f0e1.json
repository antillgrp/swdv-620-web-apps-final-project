{"ast":null,"code":"import get from 'lodash/get';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../sideEffect';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when avaliable\n *\n * The reference prop sould be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { loaded, referenceRecord, resourceLinkPath } = useReferenceManyFieldController({\n *     resource\n *     reference: 'users',\n *     record: {\n *         userId: 7\n *     }\n *     target: 'comments',\n *     source: 'userId',\n *     basePath: '/comments',\n *     page: 1,\n *     perPage: 25,\n * });\n *\n * @param {Object} option\n * @param {string} option.resource The current resource name\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The current resource record\n * @param {string} option.target The target resource key\n * @param {Object} option.filter The filter applied on the recorded records list\n * @param {string} option.source The key of the linked resource identifier\n * @param {string} option.basePath basepath to current resource\n * @param {number} option.page the page number\n * @param {number} option.perPage the number of item per page\n * @param {Object} option.sort the sort to apply to the referenced records\n *\n * @returns {ReferenceManyProps} The reference many props\n */\n\nvar useReferenceManyFieldController = function useReferenceManyFieldController(_a) {\n  var resource = _a.resource,\n      reference = _a.reference,\n      record = _a.record,\n      target = _a.target,\n      _b = _a.filter,\n      filter = _b === void 0 ? defaultFilter : _b,\n      source = _a.source,\n      basePath = _a.basePath,\n      page = _a.page,\n      perPage = _a.perPage,\n      _c = _a.sort,\n      sort = _c === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _c;\n  var referenceId = get(record, source);\n  var notify = useNotify();\n\n  var _d = useGetManyReference(reference, target, referenceId, {\n    page: page,\n    perPage: perPage\n  }, sort, filter, resource, {\n    onFailure: function onFailure(error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n    }\n  }),\n      data = _d.data,\n      ids = _d.ids,\n      total = _d.total,\n      loading = _d.loading,\n      loaded = _d.loaded;\n\n  var referenceBasePath = basePath.replace(resource, reference);\n  return {\n    data: data,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    referenceBasePath: referenceBasePath,\n    total: total\n  };\n};\n\nexport default useReferenceManyFieldController;","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-core/esm/controller/field/useReferenceManyFieldController.js"],"names":["get","useGetManyReference","useNotify","defaultFilter","useReferenceManyFieldController","_a","resource","reference","record","target","_b","filter","source","basePath","page","perPage","_c","sort","field","order","referenceId","notify","_d","onFailure","error","message","data","ids","total","loading","loaded","referenceBasePath","replace"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,IAAIC,aAAa,GAAG,EAApB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAIC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAUC,EAAV,EAAc;AAChD,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,SAAS,GAAGF,EAAE,CAACE,SAA3C;AAAA,MAAsDC,MAAM,GAAGH,EAAE,CAACG,MAAlE;AAAA,MAA0EC,MAAM,GAAGJ,EAAE,CAACI,MAAtF;AAAA,MAA8FC,EAAE,GAAGL,EAAE,CAACM,MAAtG;AAAA,MAA8GA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBP,aAAhB,GAAgCO,EAAvJ;AAAA,MAA2JE,MAAM,GAAGP,EAAE,CAACO,MAAvK;AAAA,MAA+KC,QAAQ,GAAGR,EAAE,CAACQ,QAA7L;AAAA,MAAuMC,IAAI,GAAGT,EAAE,CAACS,IAAjN;AAAA,MAAuNC,OAAO,GAAGV,EAAE,CAACU,OAApO;AAAA,MAA6OC,EAAE,GAAGX,EAAE,CAACY,IAArP;AAAA,MAA2PA,IAAI,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB;AAAEE,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAAhB,GAAiDH,EAAnT;AACA,MAAII,WAAW,GAAGpB,GAAG,CAACQ,MAAD,EAASI,MAAT,CAArB;AACA,MAAIS,MAAM,GAAGnB,SAAS,EAAtB;;AACA,MAAIoB,EAAE,GAAGrB,mBAAmB,CAACM,SAAD,EAAYE,MAAZ,EAAoBW,WAApB,EAAiC;AAAEN,IAAAA,IAAI,EAAEA,IAAR;AAAcC,IAAAA,OAAO,EAAEA;AAAvB,GAAjC,EAAmEE,IAAnE,EAAyEN,MAAzE,EAAiFL,QAAjF,EAA2F;AACnHiB,IAAAA,SAAS,EAAE,mBAAUC,KAAV,EAAiB;AACxB,aAAOH,MAAM,CAAC,OAAOG,KAAP,KAAiB,QAAjB,GACRA,KADQ,GAERA,KAAK,CAACC,OAAN,IAAiB,4BAFV,EAEwC,SAFxC,CAAb;AAGH;AALkH,GAA3F,CAA5B;AAAA,MAMIC,IAAI,GAAGJ,EAAE,CAACI,IANd;AAAA,MAMoBC,GAAG,GAAGL,EAAE,CAACK,GAN7B;AAAA,MAMkCC,KAAK,GAAGN,EAAE,CAACM,KAN7C;AAAA,MAMoDC,OAAO,GAAGP,EAAE,CAACO,OANjE;AAAA,MAM0EC,MAAM,GAAGR,EAAE,CAACQ,MANtF;;AAOA,MAAIC,iBAAiB,GAAGlB,QAAQ,CAACmB,OAAT,CAAiB1B,QAAjB,EAA2BC,SAA3B,CAAxB;AACA,SAAO;AACHmB,IAAAA,IAAI,EAAEA,IADH;AAEHC,IAAAA,GAAG,EAAEA,GAFF;AAGHG,IAAAA,MAAM,EAAEA,MAHL;AAIHD,IAAAA,OAAO,EAAEA,OAJN;AAKHE,IAAAA,iBAAiB,EAAEA,iBALhB;AAMHH,IAAAA,KAAK,EAAEA;AANJ,GAAP;AAQH,CApBD;;AAqBA,eAAexB,+BAAf","sourcesContent":["import get from 'lodash/get';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../sideEffect';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when avaliable\n *\n * The reference prop sould be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { loaded, referenceRecord, resourceLinkPath } = useReferenceManyFieldController({\n *     resource\n *     reference: 'users',\n *     record: {\n *         userId: 7\n *     }\n *     target: 'comments',\n *     source: 'userId',\n *     basePath: '/comments',\n *     page: 1,\n *     perPage: 25,\n * });\n *\n * @param {Object} option\n * @param {string} option.resource The current resource name\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The current resource record\n * @param {string} option.target The target resource key\n * @param {Object} option.filter The filter applied on the recorded records list\n * @param {string} option.source The key of the linked resource identifier\n * @param {string} option.basePath basepath to current resource\n * @param {number} option.page the page number\n * @param {number} option.perPage the number of item per page\n * @param {Object} option.sort the sort to apply to the referenced records\n *\n * @returns {ReferenceManyProps} The reference many props\n */\nvar useReferenceManyFieldController = function (_a) {\n    var resource = _a.resource, reference = _a.reference, record = _a.record, target = _a.target, _b = _a.filter, filter = _b === void 0 ? defaultFilter : _b, source = _a.source, basePath = _a.basePath, page = _a.page, perPage = _a.perPage, _c = _a.sort, sort = _c === void 0 ? { field: 'id', order: 'DESC' } : _c;\n    var referenceId = get(record, source);\n    var notify = useNotify();\n    var _d = useGetManyReference(reference, target, referenceId, { page: page, perPage: perPage }, sort, filter, resource, {\n        onFailure: function (error) {\n            return notify(typeof error === 'string'\n                ? error\n                : error.message || 'ra.notification.http_error', 'warning');\n        },\n    }), data = _d.data, ids = _d.ids, total = _d.total, loading = _d.loading, loaded = _d.loaded;\n    var referenceBasePath = basePath.replace(resource, reference);\n    return {\n        data: data,\n        ids: ids,\n        loaded: loaded,\n        loading: loading,\n        referenceBasePath: referenceBasePath,\n        total: total,\n    };\n};\nexport default useReferenceManyFieldController;\n"]},"metadata":{},"sourceType":"module"}