{"ast":null,"code":"import _objectSpread from\"/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import FakeRest from'fakerest';import CustomersRdxManager from'./CustomersRdxManager';import{GET_LIST,GET_ONE,GET_MANY,GET_MANY_REFERENCE,CREATE,UPDATE,UPDATE_MANY,DELETE,DELETE_MANY}from'react-admin';/* eslint-disable no-console */function log(type,resource,params,response){if(console.group){// Better logging in Chrome\nconsole.groupCollapsed(type,resource,JSON.stringify(params));console.log(response);console.groupEnd();}else{console.log('FakeRest request ',type,resource,params);console.log('FakeRest response',response);}}export default(function(data){var loggingEnabled=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;//making sure is empty\nCustomersRdxManager.StoreCleanup();//load data into store => no subscribers yet at this point\nCustomersRdxManager.AddCustomerSet(data.customers&&Array.isArray(data.customers)?data.customers:[]);function getRestServerFromData(data){var restSrv=new FakeRest.Server();restSrv.init(data);return restSrv;}var restServer=null;function reloadRestSrvFromRedux(){restServer=getRestServerFromData(CustomersRdxManager.state);}//creating a FakerestServer with data for ReduxStore state\nreloadRestSrvFromRedux();//creates a new server every time rdx state changes\nCustomersRdxManager.subscribe(reloadRestSrvFromRedux);function RdxCreateCustomer(record){CustomersRdxManager.AddNewCustomer(record);//TODO: Debug comment\nconsole.log(record);console.log(CustomersRdxManager.state);}function RdxUpdateCustomer(record){CustomersRdxManager.UpdateCustomer(record);//TODO: Debug comment\nconsole.log(CustomersRdxManager.state);}function RdxRemoveCustomer(id){CustomersRdxManager.DeleteCustomer(id);//TODO: Debug comment\nconsole.log(CustomersRdxManager.state);}function getResponse(type,resource,params){switch(type){case GET_LIST:{var _params$pagination=params.pagination,page=_params$pagination.page,perPage=_params$pagination.perPage;var _params$sort=params.sort,field=_params$sort.field,order=_params$sort.order;var query={sort:[field,order],range:[(page-1)*perPage,page*perPage-1],filter:params.filter};return{data:restServer.getAll(resource,query),total:restServer.getCount(resource,{filter:params.filter})};}case GET_ONE:{return{data:restServer.getOne(resource,params.id,_objectSpread({},params))};}case GET_MANY:{return{data:restServer.getAll(resource,{filter:{id:params.ids}})};}case GET_MANY_REFERENCE:{var _params$pagination2=params.pagination,_page=_params$pagination2.page,_perPage=_params$pagination2.perPage;var _params$sort2=params.sort,_field=_params$sort2.field,_order=_params$sort2.order;var _query={sort:[_field,_order],range:[(_page-1)*_perPage,_page*_perPage-1],filter:_objectSpread(_objectSpread({},params.filter),{},{[params.target]:params.id})};return{data:restServer.getAll(resource,_query),total:restServer.getCount(resource,{filter:_query.filter})};}case CREATE:{var result={data:restServer.addOne(resource,_objectSpread({},params.data))};RdxCreateCustomer(_objectSpread({},result.data));// reload restserver\nreturn result;}case UPDATE:{var _result={data:restServer.updateOne(resource,params.id,_objectSpread({},params.data))};RdxUpdateCustomer(_objectSpread({},_result.data));// reload restserver\nreturn _result;}case UPDATE_MANY:{var _result2={data:params.ids};params.ids.forEach(function(id){RdxUpdateCustomer(_objectSpread({},restServer.updateOne(resource,id,_objectSpread({},params.data))));});return _result2;}case DELETE:{var _result3={data:restServer.removeOne(resource,params.id)};RdxRemoveCustomer(_result3.data.id);// reload restserver\nreturn _result3;}case DELETE_MANY:{var _result4={data:params.ids};params.ids.forEach(function(id){restServer.removeOne(resource,id);RdxRemoveCustomer(id);// reload restserver\n});return _result4;}default:return false;}}/**\r\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n     * @param {Object} params The data request params, depending on the type\r\n     * @returns {Promise} The response\r\n     */return function(type,resource,params){var collection=restServer.getCollection(resource);if(!collection){return new Promise(function(_,reject){return reject(new Error(\"Undefined collection \\\"\".concat(resource,\"\\\"\")));});}var response;try{response=getResponse(type,resource,params);}catch(error){return new Promise(function(_,reject){return reject(error);});}if(response===false){return new Promise(function(_,reject){return reject(new Error(\"Unsupported fetch action type \".concat(type)));});}if(loggingEnabled){log(type,resource,params,response);}return new Promise(function(resolve){return resolve(response);});};});","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/src/Etl/rdxfy-observable-data-fakerest.js"],"names":["FakeRest","CustomersRdxManager","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","log","type","resource","params","response","console","group","groupCollapsed","JSON","stringify","groupEnd","data","loggingEnabled","StoreCleanup","AddCustomerSet","customers","Array","isArray","getRestServerFromData","restSrv","Server","init","restServer","reloadRestSrvFromRedux","state","subscribe","RdxCreateCustomer","record","AddNewCustomer","RdxUpdateCustomer","UpdateCustomer","RdxRemoveCustomer","id","DeleteCustomer","getResponse","pagination","page","perPage","sort","field","order","query","range","filter","getAll","total","getCount","getOne","ids","target","result","addOne","updateOne","forEach","removeOne","collection","getCollection","Promise","_","reject","Error","error","resolve"],"mappings":"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","sourcesContent":["import FakeRest from 'fakerest';\r\n\r\nimport CustomersRdxManager from './CustomersRdxManager'\r\n\r\nimport {\r\n    GET_LIST,\r\n    GET_ONE,\r\n    GET_MANY,\r\n    GET_MANY_REFERENCE,\r\n    CREATE,\r\n    UPDATE,\r\n    UPDATE_MANY,\r\n    DELETE,\r\n    DELETE_MANY,\r\n} from 'react-admin';\r\n\r\n/* eslint-disable no-console */\r\nfunction log(type, resource, params, response) {\r\n    if (console.group) {\r\n        // Better logging in Chrome\r\n        console.groupCollapsed(type, resource, JSON.stringify(params));\r\n        console.log(response);\r\n        console.groupEnd();\r\n    } else {\r\n        console.log('FakeRest request ', type, resource, params);\r\n        console.log('FakeRest response', response);\r\n    }\r\n}\r\n\r\nexport default (data, loggingEnabled = false) => {\r\n\r\n    //making sure is empty\r\n    CustomersRdxManager.StoreCleanup();\r\n\r\n    //load data into store => no subscribers yet at this point\r\n    CustomersRdxManager.AddCustomerSet(\r\n        data.customers && Array.isArray(data.customers) ? data.customers : []\r\n    );\r\n\r\n    function getRestServerFromData(data){\r\n        const restSrv = new FakeRest.Server();\r\n        restSrv.init(data);\r\n        return restSrv;\r\n    }\r\n\r\n    var restServer = null;\r\n\r\n    function reloadRestSrvFromRedux() {\r\n        restServer = getRestServerFromData(CustomersRdxManager.state);\r\n    }\r\n\r\n    //creating a FakerestServer with data for ReduxStore state\r\n    reloadRestSrvFromRedux();\r\n\r\n    //creates a new server every time rdx state changes\r\n    CustomersRdxManager.subscribe(reloadRestSrvFromRedux);\r\n\r\n    function RdxCreateCustomer(record){\r\n        CustomersRdxManager.AddNewCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(record);\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxUpdateCustomer(record){\r\n        CustomersRdxManager.UpdateCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxRemoveCustomer(id){\r\n        CustomersRdxManager.DeleteCustomer(id);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n\r\n    function getResponse(type, resource, params) {\r\n        switch (type) {\r\n            case GET_LIST: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: params.filter,\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: params.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case GET_ONE: {\r\n                return {\r\n                    data: restServer.getOne(resource, params.id, { ...params }),\r\n                };\r\n            }\r\n            case GET_MANY: {\r\n                return {\r\n                    data: restServer.getAll(resource, {\r\n                        filter: { id: params.ids },\r\n                    }),\r\n                };\r\n            }\r\n            case GET_MANY_REFERENCE: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: { ...params.filter, [params.target]: params.id },\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: query.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case CREATE: {\r\n                const result = {\r\n                    data: restServer.addOne(resource, { ...params.data }),\r\n                };\r\n                RdxCreateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE: {\r\n                const result = {\r\n                    data: restServer.updateOne(\r\n                        resource,\r\n                        params.id,\r\n                        { ...params.data, }\r\n                    ),\r\n                };\r\n                RdxUpdateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        RdxUpdateCustomer({// reload restserver\r\n                            ...restServer.updateOne(\r\n                                resource,\r\n                                id,\r\n                                { ...params.data, }\r\n                            )\r\n                        });\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            case DELETE: {\r\n                const result = {\r\n                    data: restServer.removeOne(resource, params.id)\r\n                };\r\n                RdxRemoveCustomer(result.data.id);// reload restserver\r\n                return result;\r\n            }\r\n            case DELETE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        restServer.removeOne(resource, id);\r\n                        RdxRemoveCustomer(id); // reload restserver\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n     * @param {Object} params The data request params, depending on the type\r\n     * @returns {Promise} The response\r\n     */\r\n    return (type, resource, params) => {\r\n        const collection = restServer.getCollection(resource);\r\n        if (!collection) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Undefined collection \"${resource}\"`))\r\n            );\r\n        }\r\n        let response;\r\n        try {\r\n            response = getResponse(type, resource, params);\r\n        } catch (error) {\r\n            return new Promise((_, reject) => reject(error));\r\n        }\r\n        if (response === false) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Unsupported fetch action type ${type}`))\r\n            );\r\n        }\r\n        if (loggingEnabled) {\r\n            log(type, resource, params, response);\r\n        }\r\n        return new Promise(resolve => resolve(response));\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}