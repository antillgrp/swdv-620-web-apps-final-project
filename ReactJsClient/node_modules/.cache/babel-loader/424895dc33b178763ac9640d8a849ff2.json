{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\n\nvar useLogout = function useLogout() {\n  var authProvider = useAuthProvider();\n  var dispatch = useDispatch();\n  /**\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used useLocation to get it, the logout function\n   * would be rebuilt each time the user changes location. Consequently, that\n   * would force a rerender of all components using this hook upon navigation\n   * (CoreAdminRouter for example).\n   *\n   * To avoid that, we read the location directly from history which is mutable.\n   * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n   */\n\n  var history = useHistory();\n  var logout = useCallback(function (params, redirectTo) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      dispatch(clearState());\n      history.push({\n        pathname: redirectToFromProvider || redirectTo,\n        state: {\n          nextPathname: history.location && history.location.pathname\n        }\n      });\n      return redirectToFromProvider;\n    });\n  }, [authProvider, history, dispatch]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    history.push({\n      pathname: defaultAuthParams.loginUrl,\n      state: {\n        nextPathname: history.location && history.location.pathname\n      }\n    });\n    dispatch(clearState());\n    return Promise.resolve();\n  }, [dispatch, history]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\n\nexport default useLogout;","map":{"version":3,"sources":["/home/vsonline/workspace/swdv-620-web-apps-final-project/ReactJsClient/node_modules/ra-core/esm/auth/useLogout.js"],"names":["useCallback","useDispatch","useAuthProvider","defaultAuthParams","clearState","useHistory","useLogout","authProvider","dispatch","history","logout","params","redirectTo","loginUrl","then","redirectToFromProvider","push","pathname","state","nextPathname","location","logoutWithoutProvider","_","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,SAAS,GAAG,SAAZA,SAAY,GAAY;AACxB,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,QAAQ,GAAGP,WAAW,EAA1B;AACA;;;;;;;;;;;;;AAYA,MAAIQ,OAAO,GAAGJ,UAAU,EAAxB;AACA,MAAIK,MAAM,GAAGV,WAAW,CAAC,UAAUW,MAAV,EAAkBC,UAAlB,EAA8B;AACnD,QAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,QAAIC,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAGT,iBAAiB,CAACU,QAA/B;AAA0C;;AACvE,WAAON,YAAY,CAACG,MAAb,CAAoBC,MAApB,EAA4BG,IAA5B,CAAiC,UAAUC,sBAAV,EAAkC;AACtEP,MAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACAK,MAAAA,OAAO,CAACO,IAAR,CAAa;AACTC,QAAAA,QAAQ,EAAEF,sBAAsB,IAAIH,UAD3B;AAETM,QAAAA,KAAK,EAAE;AACHC,UAAAA,YAAY,EAAEV,OAAO,CAACW,QAAR,IAAoBX,OAAO,CAACW,QAAR,CAAiBH;AADhD;AAFE,OAAb;AAMA,aAAOF,sBAAP;AACH,KATM,CAAP;AAUH,GAbuB,EAarB,CAACR,YAAD,EAAeE,OAAf,EAAwBD,QAAxB,CAbqB,CAAxB;AAcA,MAAIa,qBAAqB,GAAGrB,WAAW,CAAC,UAAUsB,CAAV,EAAa;AACjDb,IAAAA,OAAO,CAACO,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAEd,iBAAiB,CAACU,QADnB;AAETK,MAAAA,KAAK,EAAE;AACHC,QAAAA,YAAY,EAAEV,OAAO,CAACW,QAAR,IAAoBX,OAAO,CAACW,QAAR,CAAiBH;AADhD;AAFE,KAAb;AAMAT,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,WAAOmB,OAAO,CAACC,OAAR,EAAP;AACH,GATsC,EASpC,CAAChB,QAAD,EAAWC,OAAX,CAToC,CAAvC;AAUA,SAAOF,YAAY,GAAGG,MAAH,GAAYW,qBAA/B;AACH,CAzCD;;AA0CA,eAAef,SAAf","sourcesContent":["import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n    var authProvider = useAuthProvider();\n    var dispatch = useDispatch();\n    /**\n     * We need the current location to pass in the router state\n     * so that the login hook knows where to redirect to as next route after login.\n     *\n     * But if we used useLocation to get it, the logout function\n     * would be rebuilt each time the user changes location. Consequently, that\n     * would force a rerender of all components using this hook upon navigation\n     * (CoreAdminRouter for example).\n     *\n     * To avoid that, we read the location directly from history which is mutable.\n     * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n     */\n    var history = useHistory();\n    var logout = useCallback(function (params, redirectTo) {\n        if (params === void 0) { params = {}; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        return authProvider.logout(params).then(function (redirectToFromProvider) {\n            dispatch(clearState());\n            history.push({\n                pathname: redirectToFromProvider || redirectTo,\n                state: {\n                    nextPathname: history.location && history.location.pathname,\n                },\n            });\n            return redirectToFromProvider;\n        });\n    }, [authProvider, history, dispatch]);\n    var logoutWithoutProvider = useCallback(function (_) {\n        history.push({\n            pathname: defaultAuthParams.loginUrl,\n            state: {\n                nextPathname: history.location && history.location.pathname,\n            },\n        });\n        dispatch(clearState());\n        return Promise.resolve();\n    }, [dispatch, history]);\n    return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;\n"]},"metadata":{},"sourceType":"module"}