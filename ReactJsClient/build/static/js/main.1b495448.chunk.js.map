{"version":3,"sources":["../../README.md","Dashboard/Dashboard.js","Etl/CustomersRdxManager.js","Etl/Dataloader.js","CustomerView/Customers.js","Etl/rdxfy-observable-data-fakerest.js","Etl/DataProviderManager.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Dashboard","props","state","showMarkDown","markdownText","fetch","README","then","r","text","console","log","setState","Card","CardHeader","title","CardContent","this","source","React","Component","RdxManager","reduxStore","createStore","CustomersRdxManager","customersReducer","AddNewCustomer","newCustInfo","dispatch","ActionAddNewCustomer","UpdateCustomer","updCustInfo","ActionUpdateCustomer","DeleteCustomer","id","ActionDeleteCustomer","StoreCleanup","ActionStoreCleanup","AddCustomerSet","dataSetArr","ActionAddCustomerSet","subscribe","callback","Object","freeze","nowFormatedDate","Date","toISOString","split","customers","deletedCusts","ADD_NEW_CUSTOMER","ADD_CUSTOMER_SET","UPDATE_CUSTOMER","DELETE_CUSTOMER","CLEANUP","initialState","action","type","actionTypes","data","some","c","email","findIndex","reduce","max","next","created_at","updated_at","updatedIndex","key","slice","deleteIndex","curr","getState","Dataloader","onLoadClick","e","preventDefault","dataSource","jsonDataFile","loadJsonFile","alert","csvDataFile","csvMapFile","loadCSVFiles","fetchFromAPI","refillCustRdxStore","history","push","reader","FileReader","onabort","onerror","onload","JSON","parse","result","Array","isArray","from","readAsBinaryString","csvParser","require","fromString","Mapper","map","entry","i","resultObj","REST_API_URL","restApiArr","restApiIdx","concat","res","ok","json","catch","err","error","window","location","protocol","hostname","f","v","style","border","padding","fontSize","onSubmit","value","onChange","target","index","fileTypes","handleFiles","files","length","color","name","elem","onClick","CustPage","showlist","Grid","container","direction","spacing","item","CustList","List","filters","sort","field","order","Datagrid","TextField","FunctionField","label","sortBy","render","record","first_name","last_name","EmailField","DateField","locales","toLocaleString","EditButton","CustFilter","Filter","TextInput","alwaysOn","Location","latitude","longitude","rel","href","textDecoration","whiteSpace","verticalAlign","CustTitle","CustEdit","Edit","SimpleForm","disabled","NumberInput","CustCreate","Create","resource","params","response","group","groupCollapsed","stringify","groupEnd","DataProviderManager","dataProvider","loadDataProvider","dataSet","loggingEnabled","getRestServerFromData","restSrv","FakeRest","Server","init","restServer","reloadRestSrvFromRedux","RdxCreateCustomer","RdxUpdateCustomer","RdxRemoveCustomer","getResponse","GET_LIST","pagination","page","perPage","query","range","filter","getAll","total","getCount","GET_ONE","getOne","GET_MANY","ids","GET_MANY_REFERENCE","CREATE","addOne","UPDATE","updateOne","UPDATE_MANY","forEach","DELETE","removeOne","DELETE_MANY","getCollection","Promise","_","reject","Error","resolve","rdxDataProvider","App","Admin","dashboard","Resource","icon","UserIcon","options","list","edit","create","isLocalhost","Boolean","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1b495448.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/README.a0c4e880.md\";","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nimport README from \"../../../README.md\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      showMarkDown: true,\r\n      markdownText: \"# loading...\" \r\n    };\r\n\r\n    fetch(README)\r\n      .then((r) => r.text())\r\n      .then(text  => {\r\n        console.log(text); \r\n        this.setState({showMarkDown: false});\r\n        this.setState({showMarkDown: true, markdownText: text});        \r\n      }); \r\n\r\n    // CustomersRdxManager\r\n    //       .reduxStore\r\n    //       .subscribe(\r\n    //         () => { \r\n    //           console.log(\"reduxStore updated!!\");\r\n    //           this.setState({showlist: false});\r\n    //           this.setState({showlist: true});\r\n    //         }\r\n    //       );\r\n  }\r\n\r\n  render() {\r\n    \r\n    // const { props } = this;\r\n\r\n    return (\r\n      <Card>\r\n        <CardHeader title=\"Welcome to the administration\" />\r\n        <CardContent> \r\n          {\r\n            this.state.showMarkDown\r\n            &&\r\n            <ReactMarkdown source={this.state.markdownText} />\r\n          }\r\n        </CardContent>\r\n      </Card>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import { createStore } from 'redux';\r\n\r\nclass CustomersRdxManager{ //SINGLETON\r\n\r\n    static get initialState() {\r\n        //action date/time for insert and update\r\n        // eslint-disable-next-line\r\n        let nowFormatedDate = new Date().toISOString();\r\n        // eslint-disable-next-line\r\n        nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n        return {\r\n            //Customers\r\n            customers: [\r\n                //Example\r\n                // {\r\n                //     id:-1,\r\n                //     email: \"noemail@email.com\",\r\n                //     first_name: \"dummy\",\r\n                //     last_name: \"dummy\",\r\n                //     ip: \"127.0.0.1\",\r\n                //     latitude: 0,\r\n                //     longitude: 0,\r\n                //     created_at: nowFormatedDate,\r\n                //     updated_at: nowFormatedDate\r\n                // }\r\n            ],\r\n            //Cart Products\r\n            deletedCusts:[],\r\n\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n            //User logged in\r\n            // userLoggedInId:1,\r\n            // //user list\r\n            // users:[\r\n            //     { id:1, userName:'admin', password:'Passw0rd' },\r\n            // ]\r\n            /*********ADMINISTRATION(TO BE IMPLEMENTED)*************/\r\n        };\r\n    }\r\n    static get actionTypes() {\r\n        return Object.freeze({\r\n            ADD_NEW_CUSTOMER:'ADD_NEW_CUSTOMER',\r\n            ADD_CUSTOMER_SET:'ADD_CUSTOMER_SET',\r\n            UPDATE_CUSTOMER:'UPDATE_CUSTOMER',\r\n            DELETE_CUSTOMER:'DELETE_CUSTOMER',\r\n            CLEANUP:'CLEANUP',\r\n        });\r\n    }\r\n    static get customersReducer() {\r\n        return (\r\n            state=CustomersRdxManager.initialState,\r\n            action\r\n        ) => {\r\n            const { customers, deletedCusts } = state;\r\n\r\n            //action date/time for insert and update\r\n            // eslint-disable-next-line\r\n            let nowFormatedDate = new Date().toISOString();\r\n            // eslint-disable-next-line\r\n            nowFormatedDate = nowFormatedDate.split('T')[0] + ' ' + nowFormatedDate.split('T')[1].split('.')[0];\r\n\r\n            switch (action.type) {\r\n                case CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER: {\r\n                    //no validation done UI should be consistent\r\n                    const {newCustInfo} = action.data; //no id included => generated\r\n\r\n                    //if store contains newCust already => do nothing ? or update (now => do nothing)(see UPDATE_CUSTOMER)\r\n                    if(customers.some(c => c.email === newCustInfo.email)) return state;\r\n\r\n                    return { //new state with the new cust\r\n                        ...state,\r\n                        //adding the new cust\r\n                        customers: [\r\n                            ...customers,\r\n                            // new customer\r\n                            {\r\n                                ...newCustInfo,\r\n                                //if brings id and id is not in use yet else generate it max+1\r\n                                id: newCustInfo.id\r\n                                    &&\r\n                                    customers.findIndex(c => +c.id === newCustInfo.id) < 0\r\n                                    ?\r\n                                        newCustInfo.id\r\n                                    :\r\n                                        // calculation generating next id (max + 1)\r\n                                        +customers.reduce(\r\n                                            (max,next) => (+max.id > +next.id) ? max : next\r\n                                        ).id + 1,\r\n                                // now date formating\r\n                                created_at: nowFormatedDate,\r\n                                updated_at: nowFormatedDate\r\n                            }\r\n                        ]\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.UPDATE_CUSTOMER: {\r\n\r\n                    const {updCustInfo} = action.data; //id included\r\n\r\n                    const updatedIndex = customers.findIndex(c => +c.id === +updCustInfo.id);\r\n                    if(updatedIndex < 0) return state; //do nothing no error\r\n\r\n                    //make sure at LEAST ONE of the editable field has changed else do nothing\r\n                    for(let key in updCustInfo) {\r\n                        if(updCustInfo[key] !== customers[updatedIndex][key]) //change found\r\n                        return {\r\n                            ...state,\r\n                            customers: [\r\n                                ...customers.slice(0,updatedIndex),\r\n                                { //updated cust\r\n                                    ...customers[updatedIndex],\r\n                                    ...updCustInfo, //overwrite what changed\r\n                                    updated_at: nowFormatedDate\r\n                                },\r\n                            ]\r\n                        };\r\n                    }\r\n                    return state;\r\n                }\r\n                case CustomersRdxManager.actionTypes.DELETE_CUSTOMER: {\r\n\r\n                    const {id} = action.data;\r\n\r\n                    const deleteIndex = customers.findIndex(curr => +curr.id === +id);\r\n                    if(deleteIndex < 0) return state; //do nothing no error\r\n\r\n                    return {\r\n                        ...state,\r\n                        //add it to deletedCusts\r\n                        deletedCusts:[\r\n                            ...deletedCusts,\r\n                            { ...customers[deleteIndex] }\r\n                        ],\r\n                        //remove it from customers\r\n                        customers:[\r\n                            ...customers.slice(0,deleteIndex),\r\n                            ...customers.slice(deleteIndex + 1)\r\n                        ],\r\n                    };\r\n                }\r\n                case CustomersRdxManager.actionTypes.CLEANUP: {\r\n                    return { ...CustomersRdxManager.initialState };\r\n                }\r\n                case CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET: {\r\n                    /**\r\n                     * AVOID TO COMBINE SETs FROM DIFFERENT DATASOURCES INSIDE THE STORE\r\n                     */\r\n\r\n                    const {dataSetArr} = action.data;\r\n\r\n                    return {\r\n                        //cleanup first\r\n                        ...CustomersRdxManager.initialState,\r\n                        customers: [\r\n                            //...CustomersRdxManager.initialState.customers, //should be empty\r\n                            ...dataSetArr\r\n                        ]\r\n                    };\r\n                }\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    }\r\n    static get ActionAddNewCustomer(){\r\n        return (newCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_NEW_CUSTOMER,\r\n            data:{newCustInfo:newCustInfo},\r\n        });\r\n    }\r\n    static get ActionUpdateCustomer(){\r\n        return (updCustInfo) => ({\r\n            type:CustomersRdxManager.actionTypes.UPDATE_CUSTOMER,\r\n            data:{ updCustInfo:updCustInfo },\r\n        });\r\n    }\r\n    static get ActionDeleteCustomer(){\r\n        return (id) => ({\r\n            type:CustomersRdxManager.actionTypes.DELETE_CUSTOMER,\r\n            data:{ id:id },\r\n        });\r\n    }\r\n    static get ActionStoreCleanup(){\r\n        return () => ({\r\n            type:CustomersRdxManager.actionTypes.CLEANUP,\r\n            data:{},\r\n        });\r\n    }\r\n    static get ActionAddCustomerSet(){\r\n        return (dataSetArr) => ({\r\n            type:CustomersRdxManager.actionTypes.ADD_CUSTOMER_SET,\r\n            data:{dataSetArr:dataSetArr},\r\n        });\r\n    }\r\n\r\n    constructor (){\r\n        this.reduxStore = createStore(CustomersRdxManager.customersReducer);\r\n\r\n        this.AddNewCustomer = (newCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddNewCustomer(newCustInfo)\r\n        );\r\n\r\n        this.UpdateCustomer = (updCustInfo) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionUpdateCustomer(updCustInfo)\r\n        );\r\n\r\n        this.DeleteCustomer = (id) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionDeleteCustomer(id)\r\n        );\r\n\r\n        this.StoreCleanup = () => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionStoreCleanup()\r\n        );\r\n\r\n        this.AddCustomerSet = (dataSetArr) => this.reduxStore.dispatch(\r\n            CustomersRdxManager.ActionAddCustomerSet(dataSetArr)\r\n        );\r\n\r\n        this.subscribe = (callback) => this.reduxStore.subscribe(callback);\r\n\r\n        Object.freeze(this); //set \"final\" the redux\r\n    }\r\n\r\n    get state () {\r\n        return this.reduxStore.getState();\r\n    }\r\n}\r\n\r\n//SINGLETON\r\nconst RdxManager = new CustomersRdxManager();\r\nexport default RdxManager;","import React, { Component } from \"react\";\r\n\r\nimport ReactFileReader from \"react-file-reader\";\r\n\r\nimport CustomersRdxManager from \"./CustomersRdxManager\";\r\n\r\nexport default class Dataloader extends Component {\r\n  \r\n  constructor(props) {\r\n    \r\n    super(props);\r\n\r\n    //this.reloaded = this.props.\r\n\r\n    this.state = {\r\n      //remounting:true,\r\n      dataSource: 0, // 0: empty, 1:json, 2:csv, 3: database/api\r\n      jsonDataFile: null,\r\n      csvDataFile: null,\r\n      csvMapFile: null,\r\n      restApiIdx: 0,\r\n      restApiArr: [        \r\n        \"(SPRINGB) [\" + window.location.protocol\r\n        + \"//\" + window.location.hostname \r\n        + \":\" + 4001 + \"]\",\r\n        \"(EXPRESS) [\" + window.location.protocol\r\n        + \"//\" + window.location.hostname\r\n        + \":\" + 4002 + \"]\"\r\n      ],\r\n    };\r\n    //ReduxEngine.reduxStore.subscribe(() => { ???\r\n    //    this.setState({remounting:true});\r\n    //});\r\n  }\r\n\r\n  render() {\r\n    const fontStyle = (f, v) => ({ fontSize: `calc(${f}px + ${v}vmin)` });\r\n\r\n    return (\r\n      <>\r\n        <fieldset style={{ border: \"2px solid black\" }}>\r\n          <legend\r\n            style={{\r\n              border: \"2px solid black\",\r\n              padding: \"0 2vmin 0 2vmin\",\r\n              ...fontStyle(14, 5),\r\n            }}\r\n          >\r\n            Data loader\r\n          </legend>\r\n          <>\r\n            <form onSubmit={(e) => e.preventDefault()}>\r\n              <label>\r\n                <br />\r\n                <strong>Select the source of the data:</strong>\r\n                <br />\r\n                <select\r\n                  value={this.state.dataSource}\r\n                  onChange={(e) =>\r\n                    this.setState({ dataSource: e.target.value })\r\n                  }\r\n                >\r\n                  {[\r\n                    \"\",\r\n                    \"json file\",\r\n                    \"csv map/data files\",\r\n                    \"REST-API (database)\",\r\n                  ].map((dataSource, index) => (\r\n                    <option value={index}>{dataSource}</option>\r\n                  ))}\r\n                </select>\r\n              </label>\r\n              <br />\r\n              <br />\r\n              {+this.state.dataSource === 1 ? (\r\n                <ReactFileReader //https://www.npmjs.com/package/react-file-reader\r\n                  fileTypes={[\".json\"]}\r\n                  handleFiles={(files) => {\r\n                    //TODO: validate?: file[0].type === \"application/json\"\r\n                    this.setState({\r\n                      jsonDataFile: files.length > 0 ? files[0] : null,\r\n                    });\r\n                  }}\r\n                >\r\n                  <label>\r\n                    <strong>\r\n                      Select <span style={{ color: \"orange\" }}>JSON</span> file:{\" \"}\r\n                    </strong>\r\n                    <strong style={{ color: \"green\" }}>\r\n                      {this.state.jsonDataFile && this.state.jsonDataFile.name}\r\n                    </strong>\r\n                    <br />\r\n                    <button>Open</button>\r\n                  </label>\r\n                </ReactFileReader>\r\n              ) : +this.state.dataSource === 2 ? (\r\n                <>\r\n                  <ReactFileReader\r\n                    fileTypes={[\".csv\"]}\r\n                    handleFiles={(files) => {\r\n                      this.setState({\r\n                        csvDataFile: files.length > 0 ? files[0] : null,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <label>\r\n                      <strong>\r\n                        Select <span style={{ color: \"orange\" }}>CSV</span> ({\" \"}\r\n                        <span style={{ color: \"red\" }}>Data</span> ) file:{\" \"}\r\n                      </strong>\r\n                      <strong style={{ color: \"green\" }}>\r\n                        {this.state.csvDataFile && this.state.csvDataFile.name}\r\n                      </strong>\r\n                      <br />\r\n                      <button>Open Data File</button>\r\n                    </label>\r\n                  </ReactFileReader>\r\n                  <br />\r\n                  <ReactFileReader\r\n                    fileTypes={[\".csv\"]}\r\n                    handleFiles={(files) => {\r\n                      this.setState({\r\n                        csvMapFile: files.length > 0 ? files[0] : null,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <label>\r\n                      <strong>\r\n                        Select <span style={{ color: \"orange\" }}>CSV</span> ({\" \"}\r\n                        <span style={{ color: \"red\" }}>Map</span> ) file:{\" \"}\r\n                      </strong>\r\n                      <strong style={{ color: \"green\" }}>\r\n                        {this.state.csvMapFile && this.state.csvMapFile.name}\r\n                      </strong>\r\n                      <br />\r\n                      <button>Open Map File</button>\r\n                    </label>\r\n                  </ReactFileReader>\r\n                </>\r\n              ) : +this.state.dataSource === 3 ? (\r\n                <label>\r\n                  <strong>Select the Rest API for fetching the data:</strong>\r\n                  <br />\r\n                  <select\r\n                    value={this.state.restApiIdx}\r\n                    onChange={(e) =>\r\n                      this.setState({\r\n                        restApiIdx: e.target.value\r\n                      })\r\n                    }\r\n                  >\r\n                    {\r\n                      this.state.restApiArr.map(\r\n                        (elem, index) => (\r\n                          <option value={index}>{elem}</option>\r\n                        )\r\n                      )\r\n                    }\r\n                  </select>\r\n                  <br />\r\n                </label>\r\n              ) : null}\r\n              <br />\r\n              <input type=\"submit\" value=\"Load...\" onClick={this.onLoadClick} />\r\n            </form>\r\n          </>\r\n        </fieldset>\r\n      </>\r\n    );\r\n  }\r\n\r\n  onLoadClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    //TODO: comment\r\n    //console.log(this.state);\r\n\r\n    switch (+this.state.dataSource) {\r\n      case 1: {\r\n        //JSON FILE\r\n        if (!this.state.jsonDataFile)\r\n          alert(\"Json data file not properly selected, pls try again.\");\r\n        else this.loadJsonFile();        \r\n        break;\r\n      }\r\n      case 2: {\r\n        //CSV FILES\r\n        if (!this.state.csvDataFile || !this.state.csvMapFile)\r\n          alert(\"CSV Data or Map not properly selected, pls try again.\");\r\n        else this.loadCSVFiles();        \r\n        break;\r\n      }\r\n      case 3: {        \r\n        //FETCH FROM API / DB\r\n        this.fetchFromAPI();        \r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  refillCustRdxStore = (dataSetArr) => {\r\n\r\n    console.log(dataSetArr);\r\n\r\n    CustomersRdxManager.AddCustomerSet(dataSetArr);\r\n\r\n    //TODO: redirect/navegate to /customers\r\n    this.props.history && this.props.history.push(\"/customers\");\r\n\r\n    //TODO: Debug: Comment\r\n    console.log(CustomersRdxManager.state);\r\n  };\r\n\r\n  loadJsonFile = () => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"JsonFile reading was aborted\");\r\n    reader.onerror = () => console.log(\"JsonFile reading has failed\");\r\n    reader.onload = () => {\r\n      let dataSetArr = JSON.parse(reader.result);\r\n      dataSetArr = Array.isArray(dataSetArr) ? Array.from(dataSetArr) : [];\r\n\r\n      //TODO: comment\r\n      console.log(\" from JSON:\");\r\n      console.log(dataSetArr);\r\n\r\n      this.refillCustRdxStore(dataSetArr);\r\n    };\r\n    reader.readAsBinaryString(this.state.jsonDataFile);\r\n  };\r\n\r\n  loadCSVFiles = () => {\r\n    const csvParser = require(\"csvtojson\");\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"CsvFile reading was aborted\");\r\n    reader.onerror = () => console.log(\"CsvFile reading has failed\");\r\n    reader.onload = () => {\r\n      csvParser()\r\n        .fromString(reader.result)\r\n        .then(([Mapper]) => {\r\n          reader.onload = () => {\r\n            csvParser()\r\n              .fromString(reader.result)\r\n              .then((dataSetArr) => {\r\n                dataSetArr = dataSetArr.map((entry, i) => {\r\n                  const resultObj = { id: i + 1, updated_at: null };\r\n                  for (let key in Mapper) resultObj[key] = entry[Mapper[key]];\r\n                  return resultObj;\r\n                });\r\n\r\n                //TODO: comment\r\n                console.log(\"from CSV:\");\r\n                console.log(dataSetArr);\r\n\r\n                this.refillCustRdxStore(dataSetArr);\r\n              });\r\n          };\r\n          reader.readAsBinaryString(this.state.csvDataFile);\r\n        });\r\n    };\r\n    reader.readAsBinaryString(this.state.csvMapFile);\r\n  };\r\n\r\n  fetchFromAPI = () => {    \r\n    \r\n    let REST_API_URL =\r\n      this.state.restApiArr[this.state.restApiIdx]\r\n        .split(\"[\")[1]\r\n        .split(\"]\")[0]\r\n        .concat(\"/customers\");\r\n    \r\n    fetch(REST_API_URL)      \r\n      .then((res) => {\r\n        //console.log(res);\r\n        if (res.ok) return res.json();\r\n        alert(\"ERROR Fetching from: \" + REST_API_URL);\r\n        return [];\r\n      })\r\n      .then((json) => this.refillCustRdxStore(json))\r\n      .catch((err) => console.error(err));      \r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nimport RoomIcon from '@material-ui/icons/Room';\r\n\r\nimport {\r\n    Grid,\r\n    Card,    \r\n    CardContent,\r\n    /*Divider*/\r\n} from '@material-ui/core';\r\n\r\nimport {\r\n    DateField,\r\n    List,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    NumberInput,\r\n    TextField,\r\n    EditButton,\r\n    SimpleForm,\r\n    TextInput,\r\n    Filter,\r\n    EmailField,\r\n    FunctionField,\r\n} from 'react-admin';\r\n\r\nimport Dataloader from \"../Etl/Dataloader\";\r\n\r\nimport CustomersRdxManager from \"../Etl/CustomersRdxManager\"; \r\n\r\nexport class CustPage extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = { showlist: true };\r\n\r\n      CustomersRdxManager\r\n            .reduxStore\r\n            .subscribe(\r\n              () => { \r\n                console.log(\"reduxStore updated!!\");\r\n                this.setState({showlist: false});\r\n                this.setState({showlist: true});\r\n              }\r\n            );\r\n    }\r\n\r\n    render() {\r\n      \r\n    const { props } = this;\r\n\r\n    return (\r\n      <Grid container direction=\"column\" spacing={2}>\r\n        <Grid item>\r\n          <Card>\r\n            <CardContent>\r\n              <Dataloader />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item>\r\n          {\r\n            this.state.showlist \r\n            &&\r\n            <CustList {...props} />\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport class CustList extends React.Component {\r\n    \r\n    // constructor(props) {\r\n    //     super(props);        \r\n    // }\r\n\r\n    render() {\r\n        const {\r\n            props,\r\n        } = this;\r\n\r\n        return (\r\n          <List\r\n            {...props}\r\n            filters={<CustFilter />}\r\n            sort={{ field: \"id\", order: \"ASC\" }}\r\n          >\r\n            <Datagrid>\r\n              <TextField source=\"id\" />\r\n              <FunctionField\r\n                label=\"Full Name\"\r\n                sortBy=\"last_name\"\r\n                render={(record) => `${record.first_name} ${record.last_name}`}\r\n              />\r\n              <EmailField source=\"email\" />\r\n              <TextField source=\"ip\" />\r\n              <Location label=\"Location (link)\" />\r\n              <DateField locales=\"en-US\" label=\"Since\" source=\"created_at\" />\r\n              <FunctionField\r\n                label=\"Last Edit\"\r\n                sortBy=\"updated_at\"\r\n                render={(record) =>\r\n                  record.updated_at &&\r\n                  new Date(\r\n                    `${record.updated_at.split(\" \")[0]}T${\r\n                      record.updated_at.split(\" \")[1]\r\n                    }.167Z`\r\n                  ).toLocaleString()\r\n                }\r\n              />\r\n              <EditButton />\r\n            </Datagrid>\r\n          </List>\r\n        );\r\n    }\r\n}\r\n\r\nconst CustFilter = props => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    </Filter>\r\n);\r\n\r\nconst Location = ({ record }) => {\r\n    //console.log(JSON.stringify(record));\r\n    return (\r\n        record && record.latitude && record.longitude\r\n        ?\r\n            <a\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                href={\r\n                    \"http://www.google.com/maps/place/\"\r\n                    + record.latitude +\",\"+ record.longitude\r\n                }\r\n                style={{\r\n                    textDecoration: 'none',\r\n                    color:'black',\r\n                    whiteSpace:'nowrap'\r\n                }}\r\n            >\r\n                <RoomIcon style={{color:'red', verticalAlign: 'middle'}} />\r\n                {\" (\" + record.latitude +\",\"+ record.longitude + \")\" }\r\n            </a>\r\n        :\r\n            ''\r\n    );\r\n};\r\n\r\nconst CustTitle = ({ record }) => {\r\n    return (\r\n        record && record.first_name && record.last_name\r\n        ?\r\n        <span>\r\n            Customer:\r\n            { ` ${record.first_name} ${record.last_name}` }\r\n        </span>\r\n        :\r\n        ''\r\n    );\r\n};\r\n\r\nexport const CustEdit = (props) => (\r\n    <Edit title={<CustTitle />} {...props}>\r\n    <SimpleForm>\r\n        <TextInput disabled source=\"id\" />\r\n        <TextInput source=\"first_name\" />\r\n        <TextInput source=\"last_name\" />\r\n        <TextInput source=\"email\" />\r\n        <TextInput source=\"ip\" />\r\n        <NumberInput source=\"latitude\" />\r\n        <NumberInput source=\"longitude\" />\r\n    </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const CustCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"first_name\" />\r\n            <TextInput source=\"last_name\" />\r\n            <TextInput source=\"email\" />\r\n            <TextInput source=\"ip\" />\r\n            <NumberInput source=\"latitude\" />\r\n            <NumberInput source=\"longitude\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\n","import FakeRest from 'fakerest';\r\n\r\nimport CustomersRdxManager from './CustomersRdxManager'\r\n\r\nimport {\r\n    GET_LIST,\r\n    GET_ONE,\r\n    GET_MANY,\r\n    GET_MANY_REFERENCE,\r\n    CREATE,\r\n    UPDATE,\r\n    UPDATE_MANY,\r\n    DELETE,\r\n    DELETE_MANY,\r\n} from 'react-admin';\r\n\r\n/* eslint-disable no-console */\r\nfunction log(type, resource, params, response) {\r\n    if (console.group) {\r\n        // Better logging in Chrome\r\n        console.groupCollapsed(type, resource, JSON.stringify(params));\r\n        console.log(response);\r\n        console.groupEnd();\r\n    } else {\r\n        console.log('FakeRest request ', type, resource, params);\r\n        console.log('FakeRest response', response);\r\n    }\r\n}\r\n\r\nexport default (data, loggingEnabled = false) => {\r\n\r\n    //making sure is empty\r\n    CustomersRdxManager.StoreCleanup();\r\n\r\n    //load data into store => no subscribers yet at this point\r\n    CustomersRdxManager.AddCustomerSet(\r\n        data.customers && Array.isArray(data.customers) ? data.customers : []\r\n    );\r\n\r\n    function getRestServerFromData(data){\r\n        const restSrv = new FakeRest.Server();\r\n        restSrv.init(data);\r\n        return restSrv;\r\n    }\r\n\r\n    var restServer = null;\r\n\r\n    function reloadRestSrvFromRedux() {\r\n        restServer = getRestServerFromData(CustomersRdxManager.state);\r\n    }\r\n\r\n    //creating a FakerestServer with data for ReduxStore state\r\n    reloadRestSrvFromRedux();\r\n\r\n    //creates a new server every time rdx state changes\r\n    CustomersRdxManager.subscribe(reloadRestSrvFromRedux);\r\n\r\n    function RdxCreateCustomer(record){\r\n        CustomersRdxManager.AddNewCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(record);\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxUpdateCustomer(record){\r\n        CustomersRdxManager.UpdateCustomer(record);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n    function RdxRemoveCustomer(id){\r\n        CustomersRdxManager.DeleteCustomer(id);\r\n        //TODO: Debug comment\r\n        console.log(CustomersRdxManager.state);\r\n    }\r\n\r\n    function getResponse(type, resource, params) {\r\n        switch (type) {\r\n            case GET_LIST: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: params.filter,\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: params.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case GET_ONE: {\r\n                return {\r\n                    data: restServer.getOne(resource, params.id, { ...params }),\r\n                };\r\n            }\r\n            case GET_MANY: {\r\n                return {\r\n                    data: restServer.getAll(resource, {\r\n                        filter: { id: params.ids },\r\n                    }),\r\n                };\r\n            }\r\n            case GET_MANY_REFERENCE: {\r\n                const { page, perPage } = params.pagination;\r\n                const { field, order } = params.sort;\r\n                const query = {\r\n                    sort: [field, order],\r\n                    range: [(page - 1) * perPage, page * perPage - 1],\r\n                    filter: { ...params.filter, [params.target]: params.id },\r\n                };\r\n                return {\r\n                    data: restServer.getAll(resource, query),\r\n                    total: restServer.getCount(resource, {\r\n                        filter: query.filter,\r\n                    }),\r\n                };\r\n            }\r\n            case CREATE: {\r\n                const result = {\r\n                    data: restServer.addOne(resource, { ...params.data }),\r\n                };\r\n                RdxCreateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE: {\r\n                const result = {\r\n                    data: restServer.updateOne(\r\n                        resource,\r\n                        params.id,\r\n                        { ...params.data, }\r\n                    ),\r\n                };\r\n                RdxUpdateCustomer({ ...result.data });// reload restserver\r\n                return result;\r\n            }\r\n            case UPDATE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        RdxUpdateCustomer({// reload restserver\r\n                            ...restServer.updateOne(\r\n                                resource,\r\n                                id,\r\n                                { ...params.data, }\r\n                            )\r\n                        });\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            case DELETE: {\r\n                const result = {\r\n                    data: restServer.removeOne(resource, params.id)\r\n                };\r\n                RdxRemoveCustomer(result.data.id);// reload restserver\r\n                return result;\r\n            }\r\n            case DELETE_MANY: {\r\n                const result = { data: params.ids };\r\n                params.ids.forEach(\r\n                    id => {\r\n                        restServer.removeOne(resource, id);\r\n                        RdxRemoveCustomer(id); // reload restserver\r\n                    }\r\n                );\r\n                return result;\r\n            }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n     * @param {Object} params The data request params, depending on the type\r\n     * @returns {Promise} The response\r\n     */\r\n    return (type, resource, params) => {\r\n        const collection = restServer.getCollection(resource);\r\n        if (!collection) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Undefined collection \"${resource}\"`))\r\n            );\r\n        }\r\n        let response;\r\n        try {\r\n            response = getResponse(type, resource, params);\r\n        } catch (error) {\r\n            return new Promise((_, reject) => reject(error));\r\n        }\r\n        if (response === false) {\r\n            return new Promise((_, reject) =>\r\n                reject(new Error(`Unsupported fetch action type ${type}`))\r\n            );\r\n        }\r\n        if (loggingEnabled) {\r\n            log(type, resource, params, response);\r\n        }\r\n        return new Promise(resolve => resolve(response));\r\n    };\r\n};","//import fakeDataProvider from 'ra-data-fakerest';\r\n\r\nimport rdxDataProvider from './rdxfy-observable-data-fakerest';\r\n\r\nclass DataManager { //SINGLETON\r\n\r\n    dataProvider = null;\r\n\r\n    constructor(){\r\n        this.loadDataProvider({});\r\n    }\r\n\r\n    loadDataProvider(dataSet){\r\n        this.dataProvider = rdxDataProvider(\r\n            dataSet,\r\n            false //logging\r\n        );\r\n    }\r\n}\r\n\r\n//SINGLETON\r\nconst DataProviderManager = new DataManager();\r\nexport default DataProviderManager;","import React from 'react';\r\n\r\nimport { Admin, Resource } from 'react-admin';\r\n\r\nimport UserIcon from '@material-ui/icons/Group';\r\n\r\nimport Dashboard from './Dashboard/Dashboard';\r\n\r\nimport {\r\n  CustPage,\r\n  CustEdit,\r\n  CustCreate,\r\n  //CustShow\r\n} from \"./CustomerView/Customers\";\r\n\r\n// import Dataloader from './Etl/Dataloader';\r\n\r\nimport DataProviderManager from './Etl/DataProviderManager';\r\n\r\nDataProviderManager.loadDataProvider({\r\n    customers: [\r\n        {\r\n            \"id\":1,\r\n            \"email\":\"jhamilton0@usda.gov\",\r\n            \"first_name\":\"Hard Coded\",\r\n            \"last_name\":\"Data\",\r\n            \"ip\":\"135.75.95.238\",\r\n            \"latitude\":-27.634171,\r\n            \"longitude\":-52.273891,\r\n            \"created_at\":\"2015-01-21 03:20:11\",\r\n            \"updated_at\":null\r\n        },\r\n        {\"id\":2,\"email\":\"anichols1@addtoany.com\",\"first_name\":\"Anthony\",\"last_name\":\"Nichols\",\"ip\":\"147.3.15.197\",\"latitude\":56.47633,\"longitude\":53.797821,\"created_at\":\"2015-01-16 00:10:27\",\"updated_at\":null},{\"id\":3,\"email\":\"lmurphy2@sina.com.cn\",\"first_name\":\"Lawrence\",\"last_name\":\"Murphy\",\"ip\":\"70.210.188.75\",\"latitude\":16.58333,\"longitude\":121.5,\"created_at\":\"2015-01-20 20:19:37\",\"updated_at\":null},{\"id\":4,\"email\":\"sburke3@lycos.com\",\"first_name\":\"Scott\",\"last_name\":\"Burke\",\"ip\":\"104.203.83.37\",\"latitude\":37.692478,\"longitude\":120.971481,\"created_at\":\"2015-01-01 13:43:44\",\"updated_at\":null},{\"id\":5,\"email\":\"hjackson4@nsw.gov.au\",\"first_name\":\"Howard\",\"last_name\":\"Jackson\",\"ip\":\"59.197.227.237\",\"latitude\":37.578499,\"longitude\":26.48069,\"created_at\":\"2015-01-27 13:43:37\",\"updated_at\":null},{\"id\":6,\"email\":\"hcastillo5@youtu.be\",\"first_name\":\"Harold\",\"last_name\":\"Castillo\",\"ip\":\"169.236.141.105\",\"latitude\":25.2407,\"longitude\":115.7444,\"created_at\":\"2015-01-07 19:26:28\",\"updated_at\":null},{\"id\":7,\"email\":\"tfuller6@360.cn\",\"first_name\":\"Tammy\",\"last_name\":\"Fuller\",\"ip\":\"114.34.134.46\",\"latitude\":57.00993,\"longitude\":61.45776,\"created_at\":\"2015-01-23 18:34:38\",\"updated_at\":null},{\"id\":8,\"email\":\"eperez7@google.co.jp\",\"first_name\":\"Emily\",\"last_name\":\"Perez\",\"ip\":\"183.236.227.181\",\"latitude\":29.51889,\"longitude\":112.54837,\"created_at\":\"2015-01-07 08:52:38\",\"updated_at\":null},{\"id\":9,\"email\":\"vwells8@ning.com\",\"first_name\":\"Virginia\",\"last_name\":\"Wells\",\"ip\":\"136.128.49.18\",\"latitude\":-23.193609,\"longitude\":-49.383888,\"created_at\":\"2015-01-13 22:14:28\",\"updated_at\":null},{\"id\":10,\"email\":\"mpayne9@geocities.jp\",\"first_name\":\"Marilyn\",\"last_name\":\"Payne\",\"ip\":\"200.252.227.193\",\"latitude\":15.38989,\"longitude\":104.550827,\"created_at\":\"2015-01-05 08:36:52\",\"updated_at\":null},{\"id\":11,\"email\":\"shicksa@goodreads.com\",\"first_name\":\"Sara\",\"last_name\":\"Hicks\",\"ip\":\"206.68.211.203\",\"latitude\":22.835991,\"longitude\":114.804871,\"created_at\":\"2015-01-05 16:41:16\",\"updated_at\":null},{\"id\":12,\"email\":\"rgordonb@surveymonkey.com\",\"first_name\":\"Ruby\",\"last_name\":\"Gordon\",\"ip\":\"125.219.84.66\",\"latitude\":-8.104,\"longitude\":113.419998,\"created_at\":\"2015-01-02 02:22:44\",\"updated_at\":null},{\"id\":13,\"email\":\"jpaynec@loc.gov\",\"first_name\":\"Johnny\",\"last_name\":\"Payne\",\"ip\":\"207.164.155.110\",\"latitude\":-8.88202,\"longitude\":-36.502159,\"created_at\":\"2015-01-29 16:49:38\",\"updated_at\":null},{\"id\":14,\"email\":\"jedwardsd@parallels.com\",\"first_name\":\"Joe\",\"last_name\":\"Edwards\",\"ip\":\"20.32.63.226\",\"latitude\":32.977711,\"longitude\":98.097954,\"created_at\":\"2015-01-20 06:51:13\",\"updated_at\":null},{\"id\":15,\"email\":\"pwilsone@hud.gov\",\"first_name\":\"Peter\",\"last_name\":\"Wilson\",\"ip\":\"28.212.184.49\",\"latitude\":37.6917,\"longitude\":-8.2167,\"created_at\":\"2015-01-20 20:36:27\",\"updated_at\":null},{\"id\":16,\"email\":\"jwatsonf@ocn.ne.jp\",\"first_name\":\"Juan\",\"last_name\":\"Watson\",\"ip\":\"130.51.21.38\",\"latitude\":11.74697,\"longitude\":11.96083,\"created_at\":\"2015-01-11 00:57:25\",\"updated_at\":null},{\"id\":17,\"email\":\"bburkeg@utexas.edu\",\"first_name\":\"Brenda\",\"last_name\":\"Burke\",\"ip\":\"115.107.50.25\",\"latitude\":48.719391,\"longitude\":44.501839,\"created_at\":\"2015-01-09 01:46:07\",\"updated_at\":null},{\"id\":18,\"email\":\"vfernandezh@dagondesign.com\",\"first_name\":\"Victor\",\"last_name\":\"Fernandez\",\"ip\":\"131.66.212.201\",\"latitude\":-8.3111,\"longitude\":112.142899,\"created_at\":\"2015-01-09 13:09:57\",\"updated_at\":null},{\"id\":19,\"email\":\"jortizi@opensource.org\",\"first_name\":\"Jeffrey\",\"last_name\":\"Ortiz\",\"ip\":\"218.176.0.251\",\"latitude\":45.868698,\"longitude\":5.9365,\"created_at\":\"2015-01-16 14:44:51\",\"updated_at\":null},{\"id\":20,\"email\":\"gclarkj@hc360.com\",\"first_name\":\"Gloria\",\"last_name\":\"Clark\",\"ip\":\"195.207.249.82\",\"latitude\":-10.71484,\"longitude\":25.46674,\"created_at\":\"2015-01-16 16:32:29\",\"updated_at\":null}\r\n    ]\r\n});\r\n\r\nconst App = () => (\r\n  <Admin\r\n    title=\"People10 code challenge\"\r\n    dataProvider={DataProviderManager.dataProvider}\r\n    dashboard={Dashboard}\r\n  >\r\n    <Resource\r\n      icon={UserIcon}\r\n      name=\"customers\"\r\n      options={{ label: \"Customers List\" }}\r\n      list={CustPage}\r\n      edit={CustEdit}\r\n      //show={CustShow}\r\n      create={CustCreate}\r\n    />\r\n    {/* <Resource\r\n            name='Loader'\r\n            options={{ label: 'Data Loader(Etl)' }}\r\n            list={Dataloader}\r\n        /> */}\r\n  </Admin>\r\n);\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log(\r\n                                'New content is available; please refresh.'\r\n                            );\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') ===\r\n                    -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}